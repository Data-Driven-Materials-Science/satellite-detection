[W Context.cpp:70] Warning: torch.use_deterministic_algorithms is in beta, and its design and functionality may change in the future. (function operator())
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[11/12 00:55:22 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[11/12 00:55:22 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[11/12 00:55:22 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
| satellite  | 1412         |
|            |              |[0m
[32m[11/12 00:55:22 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[11/12 00:55:22 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[11/12 00:55:22 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[11/12 00:55:22 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[11/12 00:55:22 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[11/12 00:55:23 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[11/12 00:55:23 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[11/12 00:55:23 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[11/12 00:55:26 d2.utils.events]: [0m eta: 0:24:45  iter: 19  total_loss: 3.303  loss_cls: 0.5151  loss_box_reg: 0.02787  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1504  data_time: 0.0159  lr: 0.00019981  max_mem: 1616M
[32m[11/12 00:55:29 d2.utils.events]: [0m eta: 0:25:01  iter: 39  total_loss: 2.371  loss_cls: 0.3497  loss_box_reg: 0.03918  loss_mask: 0.5965  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7599  time: 0.1522  data_time: 0.0017  lr: 0.00039961  max_mem: 1701M
[32m[11/12 00:55:32 d2.utils.events]: [0m eta: 0:24:58  iter: 59  total_loss: 2.17  loss_cls: 0.2737  loss_box_reg: 0.1003  loss_mask: 0.5847  loss_rpn_cls: 0.583  loss_rpn_loc: 0.6639  time: 0.1519  data_time: 0.0015  lr: 0.00059941  max_mem: 1701M
[32m[11/12 00:55:35 d2.utils.events]: [0m eta: 0:24:58  iter: 79  total_loss: 2.18  loss_cls: 0.2669  loss_box_reg: 0.1882  loss_mask: 0.5588  loss_rpn_cls: 0.5417  loss_rpn_loc: 0.5536  time: 0.1529  data_time: 0.0016  lr: 0.00079921  max_mem: 1777M
[32m[11/12 00:55:39 d2.utils.events]: [0m eta: 0:25:24  iter: 99  total_loss: 2.128  loss_cls: 0.2742  loss_box_reg: 0.348  loss_mask: 0.5375  loss_rpn_cls: 0.4607  loss_rpn_loc: 0.508  time: 0.1557  data_time: 0.0018  lr: 0.00099901  max_mem: 1777M
[32m[11/12 00:55:42 d2.utils.events]: [0m eta: 0:25:35  iter: 119  total_loss: 2.128  loss_cls: 0.2781  loss_box_reg: 0.4048  loss_mask: 0.508  loss_rpn_cls: 0.3864  loss_rpn_loc: 0.5249  time: 0.1572  data_time: 0.0018  lr: 0.0011988  max_mem: 1777M
[32m[11/12 00:55:45 d2.utils.events]: [0m eta: 0:25:47  iter: 139  total_loss: 2.163  loss_cls: 0.3055  loss_box_reg: 0.4716  loss_mask: 0.4691  loss_rpn_cls: 0.3491  loss_rpn_loc: 0.4702  time: 0.1585  data_time: 0.0018  lr: 0.0013986  max_mem: 1777M
[32m[11/12 00:55:49 d2.utils.events]: [0m eta: 0:25:48  iter: 159  total_loss: 1.983  loss_cls: 0.2745  loss_box_reg: 0.4889  loss_mask: 0.4346  loss_rpn_cls: 0.3448  loss_rpn_loc: 0.4937  time: 0.1596  data_time: 0.0018  lr: 0.0015984  max_mem: 1777M
[32m[11/12 00:55:52 d2.utils.events]: [0m eta: 0:25:52  iter: 179  total_loss: 1.917  loss_cls: 0.2708  loss_box_reg: 0.4866  loss_mask: 0.4139  loss_rpn_cls: 0.2791  loss_rpn_loc: 0.4533  time: 0.1603  data_time: 0.0017  lr: 0.0017982  max_mem: 1777M
[32m[11/12 00:55:55 d2.utils.events]: [0m eta: 0:25:54  iter: 199  total_loss: 1.81  loss_cls: 0.2425  loss_box_reg: 0.4093  loss_mask: 0.3924  loss_rpn_cls: 0.2764  loss_rpn_loc: 0.4789  time: 0.1609  data_time: 0.0017  lr: 0.001998  max_mem: 1777M
[32m[11/12 00:55:59 d2.utils.events]: [0m eta: 0:25:54  iter: 219  total_loss: 1.688  loss_cls: 0.215  loss_box_reg: 0.3768  loss_mask: 0.352  loss_rpn_cls: 0.2453  loss_rpn_loc: 0.4511  time: 0.1612  data_time: 0.0016  lr: 0.0021978  max_mem: 1777M
[32m[11/12 00:56:02 d2.utils.events]: [0m eta: 0:26:02  iter: 239  total_loss: 1.733  loss_cls: 0.2454  loss_box_reg: 0.4739  loss_mask: 0.3461  loss_rpn_cls: 0.2639  loss_rpn_loc: 0.4269  time: 0.1619  data_time: 0.0017  lr: 0.0023976  max_mem: 1777M
[32m[11/12 00:56:06 d2.utils.events]: [0m eta: 0:26:02  iter: 259  total_loss: 1.655  loss_cls: 0.2323  loss_box_reg: 0.4243  loss_mask: 0.3484  loss_rpn_cls: 0.2161  loss_rpn_loc: 0.4176  time: 0.1624  data_time: 0.0018  lr: 0.0025974  max_mem: 1777M
[32m[11/12 00:56:09 d2.utils.events]: [0m eta: 0:26:05  iter: 279  total_loss: 1.655  loss_cls: 0.2284  loss_box_reg: 0.4755  loss_mask: 0.3258  loss_rpn_cls: 0.2381  loss_rpn_loc: 0.4136  time: 0.1632  data_time: 0.0017  lr: 0.0027972  max_mem: 1826M
[32m[11/12 00:56:13 d2.utils.events]: [0m eta: 0:26:09  iter: 299  total_loss: 1.687  loss_cls: 0.2334  loss_box_reg: 0.4978  loss_mask: 0.3222  loss_rpn_cls: 0.2208  loss_rpn_loc: 0.4001  time: 0.1638  data_time: 0.0018  lr: 0.002997  max_mem: 1826M
[32m[11/12 00:56:16 d2.utils.events]: [0m eta: 0:26:07  iter: 319  total_loss: 1.566  loss_cls: 0.2256  loss_box_reg: 0.428  loss_mask: 0.2984  loss_rpn_cls: 0.2031  loss_rpn_loc: 0.3991  time: 0.1640  data_time: 0.0017  lr: 0.0031968  max_mem: 1826M
[32m[11/12 00:56:19 d2.utils.events]: [0m eta: 0:26:07  iter: 339  total_loss: 1.671  loss_cls: 0.2382  loss_box_reg: 0.4843  loss_mask: 0.3038  loss_rpn_cls: 0.2297  loss_rpn_loc: 0.3918  time: 0.1644  data_time: 0.0018  lr: 0.0033966  max_mem: 1826M
[32m[11/12 00:56:23 d2.utils.events]: [0m eta: 0:26:20  iter: 359  total_loss: 1.626  loss_cls: 0.2359  loss_box_reg: 0.4868  loss_mask: 0.2854  loss_rpn_cls: 0.2094  loss_rpn_loc: 0.3933  time: 0.1649  data_time: 0.0017  lr: 0.0035964  max_mem: 1826M
[32m[11/12 00:56:26 d2.utils.events]: [0m eta: 0:26:18  iter: 379  total_loss: 1.568  loss_cls: 0.2041  loss_box_reg: 0.397  loss_mask: 0.2918  loss_rpn_cls: 0.2227  loss_rpn_loc: 0.3958  time: 0.1650  data_time: 0.0018  lr: 0.0037962  max_mem: 1826M
[32m[11/12 00:56:30 d2.utils.events]: [0m eta: 0:26:21  iter: 399  total_loss: 1.473  loss_cls: 0.1929  loss_box_reg: 0.4088  loss_mask: 0.2732  loss_rpn_cls: 0.2007  loss_rpn_loc: 0.4001  time: 0.1651  data_time: 0.0017  lr: 0.003996  max_mem: 1826M
[32m[11/12 00:56:33 d2.utils.events]: [0m eta: 0:26:23  iter: 419  total_loss: 1.552  loss_cls: 0.2154  loss_box_reg: 0.4521  loss_mask: 0.2912  loss_rpn_cls: 0.1643  loss_rpn_loc: 0.4031  time: 0.1654  data_time: 0.0017  lr: 0.0041958  max_mem: 1826M
[32m[11/12 00:56:36 d2.utils.events]: [0m eta: 0:26:24  iter: 439  total_loss: 1.454  loss_cls: 0.1787  loss_box_reg: 0.3805  loss_mask: 0.2618  loss_rpn_cls: 0.2104  loss_rpn_loc: 0.4096  time: 0.1654  data_time: 0.0016  lr: 0.0043956  max_mem: 1826M
[32m[11/12 00:56:40 d2.utils.events]: [0m eta: 0:26:20  iter: 459  total_loss: 1.426  loss_cls: 0.1819  loss_box_reg: 0.437  loss_mask: 0.2632  loss_rpn_cls: 0.1818  loss_rpn_loc: 0.3944  time: 0.1655  data_time: 0.0017  lr: 0.0045954  max_mem: 1826M
[32m[11/12 00:56:43 d2.utils.events]: [0m eta: 0:26:17  iter: 479  total_loss: 1.478  loss_cls: 0.2124  loss_box_reg: 0.426  loss_mask: 0.2682  loss_rpn_cls: 0.2013  loss_rpn_loc: 0.3935  time: 0.1655  data_time: 0.0018  lr: 0.0047952  max_mem: 1826M
[32m[11/12 00:56:47 d2.utils.events]: [0m eta: 0:26:15  iter: 499  total_loss: 1.486  loss_cls: 0.2192  loss_box_reg: 0.4489  loss_mask: 0.2514  loss_rpn_cls: 0.1889  loss_rpn_loc: 0.404  time: 0.1658  data_time: 0.0015  lr: 0.004995  max_mem: 1826M
[32m[11/12 00:56:50 d2.utils.events]: [0m eta: 0:26:12  iter: 519  total_loss: 1.429  loss_cls: 0.2136  loss_box_reg: 0.4379  loss_mask: 0.2656  loss_rpn_cls: 0.1557  loss_rpn_loc: 0.3709  time: 0.1658  data_time: 0.0017  lr: 0.0051948  max_mem: 1826M
[32m[11/12 00:56:53 d2.utils.events]: [0m eta: 0:26:20  iter: 539  total_loss: 1.528  loss_cls: 0.2244  loss_box_reg: 0.4739  loss_mask: 0.261  loss_rpn_cls: 0.1523  loss_rpn_loc: 0.3571  time: 0.1660  data_time: 0.0017  lr: 0.0053946  max_mem: 1826M
[32m[11/12 00:56:57 d2.utils.events]: [0m eta: 0:26:25  iter: 559  total_loss: 1.611  loss_cls: 0.2515  loss_box_reg: 0.4433  loss_mask: 0.2587  loss_rpn_cls: 0.1712  loss_rpn_loc: 0.4806  time: 0.1662  data_time: 0.0018  lr: 0.0055944  max_mem: 1826M
[32m[11/12 00:57:00 d2.utils.events]: [0m eta: 0:26:24  iter: 579  total_loss: 1.488  loss_cls: 0.2087  loss_box_reg: 0.4402  loss_mask: 0.2529  loss_rpn_cls: 0.1627  loss_rpn_loc: 0.3997  time: 0.1664  data_time: 0.0016  lr: 0.0057942  max_mem: 1826M
[32m[11/12 00:57:04 d2.utils.events]: [0m eta: 0:26:24  iter: 599  total_loss: 1.542  loss_cls: 0.2234  loss_box_reg: 0.4608  loss_mask: 0.2488  loss_rpn_cls: 0.1748  loss_rpn_loc: 0.4125  time: 0.1666  data_time: 0.0020  lr: 0.005994  max_mem: 1826M
[32m[11/12 00:57:07 d2.utils.events]: [0m eta: 0:26:26  iter: 619  total_loss: 1.413  loss_cls: 0.2069  loss_box_reg: 0.4419  loss_mask: 0.2498  loss_rpn_cls: 0.1608  loss_rpn_loc: 0.3852  time: 0.1667  data_time: 0.0017  lr: 0.0061938  max_mem: 1826M
[32m[11/12 00:57:11 d2.utils.events]: [0m eta: 0:26:25  iter: 639  total_loss: 1.337  loss_cls: 0.1921  loss_box_reg: 0.3917  loss_mask: 0.2344  loss_rpn_cls: 0.1495  loss_rpn_loc: 0.3706  time: 0.1669  data_time: 0.0019  lr: 0.0063936  max_mem: 1826M
[32m[11/12 00:57:14 d2.utils.events]: [0m eta: 0:26:23  iter: 659  total_loss: 1.475  loss_cls: 0.2076  loss_box_reg: 0.4515  loss_mask: 0.2485  loss_rpn_cls: 0.1814  loss_rpn_loc: 0.3934  time: 0.1670  data_time: 0.0017  lr: 0.0065934  max_mem: 1826M
[32m[11/12 00:57:18 d2.utils.events]: [0m eta: 0:26:21  iter: 679  total_loss: 1.395  loss_cls: 0.2049  loss_box_reg: 0.4197  loss_mask: 0.2286  loss_rpn_cls: 0.1558  loss_rpn_loc: 0.3623  time: 0.1671  data_time: 0.0018  lr: 0.0067932  max_mem: 1826M
[32m[11/12 00:57:21 d2.utils.events]: [0m eta: 0:26:19  iter: 699  total_loss: 1.381  loss_cls: 0.1977  loss_box_reg: 0.4265  loss_mask: 0.2286  loss_rpn_cls: 0.1648  loss_rpn_loc: 0.4059  time: 0.1671  data_time: 0.0018  lr: 0.006993  max_mem: 1826M
[32m[11/12 00:57:24 d2.utils.events]: [0m eta: 0:26:16  iter: 719  total_loss: 1.423  loss_cls: 0.2077  loss_box_reg: 0.4374  loss_mask: 0.2357  loss_rpn_cls: 0.1749  loss_rpn_loc: 0.3805  time: 0.1672  data_time: 0.0018  lr: 0.0071928  max_mem: 1826M
[32m[11/12 00:57:28 d2.utils.events]: [0m eta: 0:26:13  iter: 739  total_loss: 1.252  loss_cls: 0.1566  loss_box_reg: 0.3487  loss_mask: 0.2201  loss_rpn_cls: 0.1599  loss_rpn_loc: 0.4043  time: 0.1672  data_time: 0.0018  lr: 0.0073926  max_mem: 1826M
[32m[11/12 00:57:31 d2.utils.events]: [0m eta: 0:26:10  iter: 759  total_loss: 1.339  loss_cls: 0.1971  loss_box_reg: 0.4139  loss_mask: 0.2187  loss_rpn_cls: 0.152  loss_rpn_loc: 0.3723  time: 0.1672  data_time: 0.0017  lr: 0.0075924  max_mem: 1826M
[32m[11/12 00:57:35 d2.utils.events]: [0m eta: 0:26:08  iter: 779  total_loss: 1.337  loss_cls: 0.1857  loss_box_reg: 0.4187  loss_mask: 0.228  loss_rpn_cls: 0.1367  loss_rpn_loc: 0.3925  time: 0.1674  data_time: 0.0018  lr: 0.0077922  max_mem: 1826M
[32m[11/12 00:57:38 d2.utils.events]: [0m eta: 0:26:04  iter: 799  total_loss: 1.405  loss_cls: 0.1964  loss_box_reg: 0.4185  loss_mask: 0.2232  loss_rpn_cls: 0.1843  loss_rpn_loc: 0.3828  time: 0.1673  data_time: 0.0018  lr: 0.007992  max_mem: 1826M
[32m[11/12 00:57:41 d2.utils.events]: [0m eta: 0:26:01  iter: 819  total_loss: 1.334  loss_cls: 0.1663  loss_box_reg: 0.3771  loss_mask: 0.2234  loss_rpn_cls: 0.152  loss_rpn_loc: 0.4245  time: 0.1674  data_time: 0.0018  lr: 0.0081918  max_mem: 1826M
[32m[11/12 00:57:45 d2.utils.events]: [0m eta: 0:25:58  iter: 839  total_loss: 1.338  loss_cls: 0.1669  loss_box_reg: 0.4008  loss_mask: 0.2311  loss_rpn_cls: 0.1495  loss_rpn_loc: 0.3744  time: 0.1675  data_time: 0.0018  lr: 0.0083916  max_mem: 1826M
[32m[11/12 00:57:48 d2.utils.events]: [0m eta: 0:25:56  iter: 859  total_loss: 1.323  loss_cls: 0.1855  loss_box_reg: 0.4263  loss_mask: 0.2173  loss_rpn_cls: 0.1582  loss_rpn_loc: 0.3548  time: 0.1676  data_time: 0.0018  lr: 0.0085914  max_mem: 1826M
[32m[11/12 00:57:52 d2.utils.events]: [0m eta: 0:25:52  iter: 879  total_loss: 1.346  loss_cls: 0.1956  loss_box_reg: 0.456  loss_mask: 0.2055  loss_rpn_cls: 0.1727  loss_rpn_loc: 0.3623  time: 0.1676  data_time: 0.0018  lr: 0.0087912  max_mem: 1826M
[32m[11/12 00:57:55 d2.utils.events]: [0m eta: 0:25:50  iter: 899  total_loss: 1.356  loss_cls: 0.1969  loss_box_reg: 0.4326  loss_mask: 0.2177  loss_rpn_cls: 0.1961  loss_rpn_loc: 0.3449  time: 0.1677  data_time: 0.0017  lr: 0.008991  max_mem: 1826M
[32m[11/12 00:57:59 d2.utils.events]: [0m eta: 0:25:47  iter: 919  total_loss: 1.365  loss_cls: 0.2008  loss_box_reg: 0.4596  loss_mask: 0.2025  loss_rpn_cls: 0.1485  loss_rpn_loc: 0.369  time: 0.1677  data_time: 0.0018  lr: 0.0091908  max_mem: 1826M
[32m[11/12 00:58:02 d2.utils.events]: [0m eta: 0:25:44  iter: 939  total_loss: 1.298  loss_cls: 0.1847  loss_box_reg: 0.4021  loss_mask: 0.2051  loss_rpn_cls: 0.1428  loss_rpn_loc: 0.3648  time: 0.1678  data_time: 0.0017  lr: 0.0093906  max_mem: 1826M
[32m[11/12 00:58:05 d2.utils.events]: [0m eta: 0:25:41  iter: 959  total_loss: 1.327  loss_cls: 0.1755  loss_box_reg: 0.4279  loss_mask: 0.2263  loss_rpn_cls: 0.1323  loss_rpn_loc: 0.3724  time: 0.1679  data_time: 0.0017  lr: 0.0095904  max_mem: 1826M
[32m[11/12 00:58:09 d2.utils.events]: [0m eta: 0:25:37  iter: 979  total_loss: 1.448  loss_cls: 0.2022  loss_box_reg: 0.4403  loss_mask: 0.2106  loss_rpn_cls: 0.157  loss_rpn_loc: 0.4243  time: 0.1679  data_time: 0.0018  lr: 0.0097902  max_mem: 1826M
[32m[11/12 00:58:12 d2.utils.events]: [0m eta: 0:25:33  iter: 999  total_loss: 1.347  loss_cls: 0.1856  loss_box_reg: 0.4071  loss_mask: 0.2209  loss_rpn_cls: 0.1604  loss_rpn_loc: 0.4176  time: 0.1678  data_time: 0.0017  lr: 0.00999  max_mem: 1826M
[32m[11/12 00:58:15 d2.utils.events]: [0m eta: 0:25:31  iter: 1019  total_loss: 1.286  loss_cls: 0.184  loss_box_reg: 0.3973  loss_mask: 0.2073  loss_rpn_cls: 0.1356  loss_rpn_loc: 0.3467  time: 0.1678  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:19 d2.utils.events]: [0m eta: 0:25:29  iter: 1039  total_loss: 1.227  loss_cls: 0.1755  loss_box_reg: 0.4037  loss_mask: 0.1988  loss_rpn_cls: 0.1093  loss_rpn_loc: 0.3325  time: 0.1678  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:22 d2.utils.events]: [0m eta: 0:25:27  iter: 1059  total_loss: 1.312  loss_cls: 0.1917  loss_box_reg: 0.419  loss_mask: 0.2115  loss_rpn_cls: 0.1599  loss_rpn_loc: 0.3621  time: 0.1679  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:26 d2.utils.events]: [0m eta: 0:25:26  iter: 1079  total_loss: 1.294  loss_cls: 0.1856  loss_box_reg: 0.4255  loss_mask: 0.2026  loss_rpn_cls: 0.1276  loss_rpn_loc: 0.3252  time: 0.1679  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:29 d2.utils.events]: [0m eta: 0:25:24  iter: 1099  total_loss: 1.282  loss_cls: 0.1776  loss_box_reg: 0.3678  loss_mask: 0.2072  loss_rpn_cls: 0.1202  loss_rpn_loc: 0.3549  time: 0.1680  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:33 d2.utils.events]: [0m eta: 0:25:21  iter: 1119  total_loss: 1.305  loss_cls: 0.1949  loss_box_reg: 0.4152  loss_mask: 0.2152  loss_rpn_cls: 0.1269  loss_rpn_loc: 0.3372  time: 0.1681  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:36 d2.utils.events]: [0m eta: 0:25:20  iter: 1139  total_loss: 1.237  loss_cls: 0.1705  loss_box_reg: 0.3996  loss_mask: 0.2008  loss_rpn_cls: 0.1467  loss_rpn_loc: 0.317  time: 0.1681  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:39 d2.utils.events]: [0m eta: 0:25:17  iter: 1159  total_loss: 1.237  loss_cls: 0.1729  loss_box_reg: 0.4132  loss_mask: 0.2054  loss_rpn_cls: 0.1251  loss_rpn_loc: 0.3374  time: 0.1681  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:43 d2.utils.events]: [0m eta: 0:25:16  iter: 1179  total_loss: 1.175  loss_cls: 0.1601  loss_box_reg: 0.3709  loss_mask: 0.185  loss_rpn_cls: 0.144  loss_rpn_loc: 0.3269  time: 0.1682  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:46 d2.utils.events]: [0m eta: 0:25:13  iter: 1199  total_loss: 1.309  loss_cls: 0.1611  loss_box_reg: 0.3537  loss_mask: 0.1928  loss_rpn_cls: 0.1657  loss_rpn_loc: 0.4304  time: 0.1683  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:50 d2.utils.events]: [0m eta: 0:25:09  iter: 1219  total_loss: 1.233  loss_cls: 0.1408  loss_box_reg: 0.3488  loss_mask: 0.212  loss_rpn_cls: 0.1632  loss_rpn_loc: 0.3877  time: 0.1682  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:53 d2.utils.events]: [0m eta: 0:25:06  iter: 1239  total_loss: 1.255  loss_cls: 0.169  loss_box_reg: 0.3729  loss_mask: 0.2027  loss_rpn_cls: 0.1473  loss_rpn_loc: 0.357  time: 0.1682  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:58:57 d2.utils.events]: [0m eta: 0:25:03  iter: 1259  total_loss: 1.187  loss_cls: 0.1854  loss_box_reg: 0.3895  loss_mask: 0.1926  loss_rpn_cls: 0.1026  loss_rpn_loc: 0.3159  time: 0.1683  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:00 d2.utils.events]: [0m eta: 0:24:59  iter: 1279  total_loss: 1.206  loss_cls: 0.196  loss_box_reg: 0.376  loss_mask: 0.1934  loss_rpn_cls: 0.0991  loss_rpn_loc: 0.3163  time: 0.1684  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:03 d2.utils.events]: [0m eta: 0:24:56  iter: 1299  total_loss: 1.32  loss_cls: 0.1998  loss_box_reg: 0.4122  loss_mask: 0.2093  loss_rpn_cls: 0.1452  loss_rpn_loc: 0.3748  time: 0.1684  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:07 d2.utils.events]: [0m eta: 0:24:54  iter: 1319  total_loss: 1.215  loss_cls: 0.1812  loss_box_reg: 0.3843  loss_mask: 0.1904  loss_rpn_cls: 0.08972  loss_rpn_loc: 0.3282  time: 0.1685  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:10 d2.utils.events]: [0m eta: 0:24:50  iter: 1339  total_loss: 1.207  loss_cls: 0.1728  loss_box_reg: 0.3784  loss_mask: 0.2042  loss_rpn_cls: 0.1146  loss_rpn_loc: 0.3415  time: 0.1685  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:14 d2.utils.events]: [0m eta: 0:24:46  iter: 1359  total_loss: 1.18  loss_cls: 0.1784  loss_box_reg: 0.3774  loss_mask: 0.2037  loss_rpn_cls: 0.09866  loss_rpn_loc: 0.324  time: 0.1685  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:17 d2.utils.events]: [0m eta: 0:24:43  iter: 1379  total_loss: 1.15  loss_cls: 0.1639  loss_box_reg: 0.3794  loss_mask: 0.1803  loss_rpn_cls: 0.1096  loss_rpn_loc: 0.3113  time: 0.1685  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:20 d2.utils.events]: [0m eta: 0:24:40  iter: 1399  total_loss: 1.155  loss_cls: 0.1663  loss_box_reg: 0.3569  loss_mask: 0.1858  loss_rpn_cls: 0.09242  loss_rpn_loc: 0.3157  time: 0.1685  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:24 d2.utils.events]: [0m eta: 0:24:36  iter: 1419  total_loss: 1.195  loss_cls: 0.1591  loss_box_reg: 0.3739  loss_mask: 0.1907  loss_rpn_cls: 0.09139  loss_rpn_loc: 0.3354  time: 0.1685  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:27 d2.utils.events]: [0m eta: 0:24:33  iter: 1439  total_loss: 1.165  loss_cls: 0.1584  loss_box_reg: 0.3894  loss_mask: 0.1775  loss_rpn_cls: 0.09267  loss_rpn_loc: 0.3211  time: 0.1686  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:31 d2.utils.events]: [0m eta: 0:24:30  iter: 1459  total_loss: 1.204  loss_cls: 0.1706  loss_box_reg: 0.3775  loss_mask: 0.1921  loss_rpn_cls: 0.1037  loss_rpn_loc: 0.3282  time: 0.1686  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:34 d2.utils.events]: [0m eta: 0:24:27  iter: 1479  total_loss: 1.087  loss_cls: 0.145  loss_box_reg: 0.3625  loss_mask: 0.1853  loss_rpn_cls: 0.1003  loss_rpn_loc: 0.2975  time: 0.1686  data_time: 0.0016  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:38 d2.utils.events]: [0m eta: 0:24:23  iter: 1499  total_loss: 1.086  loss_cls: 0.1718  loss_box_reg: 0.3707  loss_mask: 0.179  loss_rpn_cls: 0.09987  loss_rpn_loc: 0.3062  time: 0.1685  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:41 d2.utils.events]: [0m eta: 0:24:20  iter: 1519  total_loss: 1.078  loss_cls: 0.148  loss_box_reg: 0.3703  loss_mask: 0.1883  loss_rpn_cls: 0.07648  loss_rpn_loc: 0.3022  time: 0.1685  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:44 d2.utils.events]: [0m eta: 0:24:17  iter: 1539  total_loss: 1.088  loss_cls: 0.1756  loss_box_reg: 0.3756  loss_mask: 0.1933  loss_rpn_cls: 0.07806  loss_rpn_loc: 0.278  time: 0.1686  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:48 d2.utils.events]: [0m eta: 0:24:13  iter: 1559  total_loss: 1.17  loss_cls: 0.181  loss_box_reg: 0.3625  loss_mask: 0.1846  loss_rpn_cls: 0.1218  loss_rpn_loc: 0.294  time: 0.1686  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:51 d2.utils.events]: [0m eta: 0:24:09  iter: 1579  total_loss: 1.045  loss_cls: 0.1681  loss_box_reg: 0.3419  loss_mask: 0.1816  loss_rpn_cls: 0.08299  loss_rpn_loc: 0.292  time: 0.1687  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:55 d2.utils.events]: [0m eta: 0:24:05  iter: 1599  total_loss: 1.148  loss_cls: 0.1524  loss_box_reg: 0.3742  loss_mask: 0.1775  loss_rpn_cls: 0.09314  loss_rpn_loc: 0.3082  time: 0.1688  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 00:59:58 d2.utils.events]: [0m eta: 0:24:02  iter: 1619  total_loss: 1.022  loss_cls: 0.1412  loss_box_reg: 0.3516  loss_mask: 0.1678  loss_rpn_cls: 0.08851  loss_rpn_loc: 0.2871  time: 0.1688  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:02 d2.utils.events]: [0m eta: 0:23:58  iter: 1639  total_loss: 1.029  loss_cls: 0.1555  loss_box_reg: 0.3397  loss_mask: 0.1704  loss_rpn_cls: 0.0702  loss_rpn_loc: 0.2913  time: 0.1688  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:05 d2.utils.events]: [0m eta: 0:23:55  iter: 1659  total_loss: 1.082  loss_cls: 0.161  loss_box_reg: 0.3738  loss_mask: 0.1681  loss_rpn_cls: 0.06785  loss_rpn_loc: 0.2687  time: 0.1689  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:09 d2.utils.events]: [0m eta: 0:23:51  iter: 1679  total_loss: 1.109  loss_cls: 0.1525  loss_box_reg: 0.364  loss_mask: 0.1821  loss_rpn_cls: 0.09635  loss_rpn_loc: 0.2718  time: 0.1689  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:12 d2.utils.events]: [0m eta: 0:23:47  iter: 1699  total_loss: 0.9852  loss_cls: 0.1367  loss_box_reg: 0.3493  loss_mask: 0.1697  loss_rpn_cls: 0.08728  loss_rpn_loc: 0.2598  time: 0.1689  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:16 d2.utils.events]: [0m eta: 0:23:44  iter: 1719  total_loss: 1.04  loss_cls: 0.1418  loss_box_reg: 0.3357  loss_mask: 0.1795  loss_rpn_cls: 0.08792  loss_rpn_loc: 0.2955  time: 0.1690  data_time: 0.0016  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:19 d2.utils.events]: [0m eta: 0:23:41  iter: 1739  total_loss: 1.044  loss_cls: 0.1582  loss_box_reg: 0.3384  loss_mask: 0.1782  loss_rpn_cls: 0.08598  loss_rpn_loc: 0.2881  time: 0.1690  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:23 d2.utils.events]: [0m eta: 0:23:39  iter: 1759  total_loss: 1.093  loss_cls: 0.1451  loss_box_reg: 0.3576  loss_mask: 0.1778  loss_rpn_cls: 0.09516  loss_rpn_loc: 0.3038  time: 0.1690  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:26 d2.utils.events]: [0m eta: 0:23:35  iter: 1779  total_loss: 1.063  loss_cls: 0.1558  loss_box_reg: 0.3555  loss_mask: 0.1711  loss_rpn_cls: 0.0892  loss_rpn_loc: 0.2717  time: 0.1691  data_time: 0.0016  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:29 d2.utils.events]: [0m eta: 0:23:32  iter: 1799  total_loss: 0.9971  loss_cls: 0.1437  loss_box_reg: 0.3427  loss_mask: 0.1641  loss_rpn_cls: 0.09088  loss_rpn_loc: 0.2609  time: 0.1691  data_time: 0.0016  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:33 d2.utils.events]: [0m eta: 0:23:28  iter: 1819  total_loss: 1.053  loss_cls: 0.1557  loss_box_reg: 0.345  loss_mask: 0.1719  loss_rpn_cls: 0.08252  loss_rpn_loc: 0.2742  time: 0.1691  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:36 d2.utils.events]: [0m eta: 0:23:25  iter: 1839  total_loss: 1.016  loss_cls: 0.1434  loss_box_reg: 0.3262  loss_mask: 0.1654  loss_rpn_cls: 0.08887  loss_rpn_loc: 0.2812  time: 0.1691  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:40 d2.utils.events]: [0m eta: 0:23:21  iter: 1859  total_loss: 0.9618  loss_cls: 0.1432  loss_box_reg: 0.3448  loss_mask: 0.163  loss_rpn_cls: 0.05261  loss_rpn_loc: 0.2553  time: 0.1691  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:43 d2.utils.events]: [0m eta: 0:23:18  iter: 1879  total_loss: 0.9712  loss_cls: 0.1371  loss_box_reg: 0.3313  loss_mask: 0.1701  loss_rpn_cls: 0.08778  loss_rpn_loc: 0.2647  time: 0.1691  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:46 d2.utils.events]: [0m eta: 0:23:15  iter: 1899  total_loss: 0.9867  loss_cls: 0.1359  loss_box_reg: 0.3294  loss_mask: 0.1596  loss_rpn_cls: 0.0881  loss_rpn_loc: 0.2791  time: 0.1691  data_time: 0.0016  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:50 d2.utils.events]: [0m eta: 0:23:11  iter: 1919  total_loss: 1.018  loss_cls: 0.1517  loss_box_reg: 0.3211  loss_mask: 0.1673  loss_rpn_cls: 0.06728  loss_rpn_loc: 0.2713  time: 0.1692  data_time: 0.0016  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:53 d2.utils.events]: [0m eta: 0:23:08  iter: 1939  total_loss: 0.9343  loss_cls: 0.1306  loss_box_reg: 0.3148  loss_mask: 0.1582  loss_rpn_cls: 0.07168  loss_rpn_loc: 0.2723  time: 0.1692  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:00:57 d2.utils.events]: [0m eta: 0:23:04  iter: 1959  total_loss: 0.9849  loss_cls: 0.1442  loss_box_reg: 0.3247  loss_mask: 0.17  loss_rpn_cls: 0.07812  loss_rpn_loc: 0.2537  time: 0.1692  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:00 d2.utils.events]: [0m eta: 0:23:01  iter: 1979  total_loss: 0.9587  loss_cls: 0.1341  loss_box_reg: 0.3202  loss_mask: 0.1594  loss_rpn_cls: 0.05576  loss_rpn_loc: 0.2712  time: 0.1693  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:04 d2.utils.events]: [0m eta: 0:22:59  iter: 1999  total_loss: 0.9741  loss_cls: 0.1472  loss_box_reg: 0.3347  loss_mask: 0.1585  loss_rpn_cls: 0.06865  loss_rpn_loc: 0.2599  time: 0.1693  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:07 d2.utils.events]: [0m eta: 0:22:56  iter: 2019  total_loss: 0.9867  loss_cls: 0.1484  loss_box_reg: 0.3449  loss_mask: 0.1599  loss_rpn_cls: 0.06684  loss_rpn_loc: 0.2564  time: 0.1693  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:11 d2.utils.events]: [0m eta: 0:22:53  iter: 2039  total_loss: 1.011  loss_cls: 0.1431  loss_box_reg: 0.3363  loss_mask: 0.1679  loss_rpn_cls: 0.111  loss_rpn_loc: 0.2454  time: 0.1694  data_time: 0.0016  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:14 d2.utils.events]: [0m eta: 0:22:50  iter: 2059  total_loss: 0.9769  loss_cls: 0.1373  loss_box_reg: 0.3248  loss_mask: 0.1561  loss_rpn_cls: 0.08597  loss_rpn_loc: 0.2626  time: 0.1694  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:18 d2.utils.events]: [0m eta: 0:22:46  iter: 2079  total_loss: 0.9588  loss_cls: 0.1353  loss_box_reg: 0.3124  loss_mask: 0.1651  loss_rpn_cls: 0.07149  loss_rpn_loc: 0.2625  time: 0.1694  data_time: 0.0019  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:21 d2.utils.events]: [0m eta: 0:22:42  iter: 2099  total_loss: 0.9523  loss_cls: 0.1379  loss_box_reg: 0.3039  loss_mask: 0.1505  loss_rpn_cls: 0.08885  loss_rpn_loc: 0.2515  time: 0.1694  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:24 d2.utils.events]: [0m eta: 0:22:39  iter: 2119  total_loss: 0.9482  loss_cls: 0.1311  loss_box_reg: 0.3117  loss_mask: 0.152  loss_rpn_cls: 0.07375  loss_rpn_loc: 0.2566  time: 0.1694  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:28 d2.utils.events]: [0m eta: 0:22:35  iter: 2139  total_loss: 0.9469  loss_cls: 0.136  loss_box_reg: 0.3223  loss_mask: 0.1644  loss_rpn_cls: 0.06909  loss_rpn_loc: 0.2473  time: 0.1694  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:31 d2.utils.events]: [0m eta: 0:22:33  iter: 2159  total_loss: 0.9942  loss_cls: 0.139  loss_box_reg: 0.3239  loss_mask: 0.1581  loss_rpn_cls: 0.1045  loss_rpn_loc: 0.2637  time: 0.1695  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:35 d2.utils.events]: [0m eta: 0:22:29  iter: 2179  total_loss: 0.8914  loss_cls: 0.1199  loss_box_reg: 0.3088  loss_mask: 0.1552  loss_rpn_cls: 0.05522  loss_rpn_loc: 0.2527  time: 0.1695  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:38 d2.utils.events]: [0m eta: 0:22:25  iter: 2199  total_loss: 1.014  loss_cls: 0.1245  loss_box_reg: 0.3176  loss_mask: 0.1657  loss_rpn_cls: 0.08083  loss_rpn_loc: 0.27  time: 0.1694  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:42 d2.utils.events]: [0m eta: 0:22:22  iter: 2219  total_loss: 1.003  loss_cls: 0.1388  loss_box_reg: 0.3091  loss_mask: 0.158  loss_rpn_cls: 0.06457  loss_rpn_loc: 0.3027  time: 0.1694  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:45 d2.utils.events]: [0m eta: 0:22:19  iter: 2239  total_loss: 0.9719  loss_cls: 0.1319  loss_box_reg: 0.3202  loss_mask: 0.161  loss_rpn_cls: 0.08919  loss_rpn_loc: 0.2809  time: 0.1695  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:48 d2.utils.events]: [0m eta: 0:22:15  iter: 2259  total_loss: 0.9844  loss_cls: 0.1379  loss_box_reg: 0.3131  loss_mask: 0.1707  loss_rpn_cls: 0.06897  loss_rpn_loc: 0.2799  time: 0.1694  data_time: 0.0018  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:52 d2.utils.events]: [0m eta: 0:22:10  iter: 2279  total_loss: 0.9239  loss_cls: 0.1261  loss_box_reg: 0.2963  loss_mask: 0.1536  loss_rpn_cls: 0.09837  loss_rpn_loc: 0.2489  time: 0.1694  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:55 d2.utils.events]: [0m eta: 0:22:07  iter: 2299  total_loss: 0.9415  loss_cls: 0.1291  loss_box_reg: 0.2994  loss_mask: 0.1602  loss_rpn_cls: 0.09246  loss_rpn_loc: 0.2637  time: 0.1695  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:01:59 d2.utils.events]: [0m eta: 0:22:03  iter: 2319  total_loss: 0.9419  loss_cls: 0.1212  loss_box_reg: 0.3217  loss_mask: 0.1536  loss_rpn_cls: 0.06884  loss_rpn_loc: 0.242  time: 0.1695  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:02:02 d2.utils.events]: [0m eta: 0:21:59  iter: 2339  total_loss: 0.8485  loss_cls: 0.1226  loss_box_reg: 0.3141  loss_mask: 0.1461  loss_rpn_cls: 0.05732  loss_rpn_loc: 0.2339  time: 0.1695  data_time: 0.0017  lr: 0.01  max_mem: 1826M
[32m[11/12 01:02:06 d2.utils.events]: [0m eta: 0:21:57  iter: 2359  total_loss: 0.9221  loss_cls: 0.1196  loss_box_reg: 0.3102  loss_mask: 0.1503  loss_rpn_cls: 0.06326  loss_rpn_loc: 0.2544  time: 0.1695  data_time: 0.0017  lr: 0.01  max_mem: 1826M
