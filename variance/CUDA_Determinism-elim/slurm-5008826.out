Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[11/12 18:43:32 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[11/12 18:43:32 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[11/12 18:43:32 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
| satellite  | 1412         |
|            |              |[0m
[32m[11/12 18:43:32 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[11/12 18:43:32 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[11/12 18:43:32 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[11/12 18:43:32 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[11/12 18:43:32 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[11/12 18:43:32 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[11/12 18:43:32 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[11/12 18:43:32 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[11/12 18:43:35 d2.utils.events]: [0m eta: 0:16:38  iter: 19  total_loss: 3.302  loss_cls: 0.5147  loss_box_reg: 0.02782  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1013  data_time: 0.0155  lr: 0.00019981  max_mem: 1618M
[32m[11/12 18:43:37 d2.utils.events]: [0m eta: 0:16:45  iter: 39  total_loss: 2.367  loss_cls: 0.3449  loss_box_reg: 0.04116  loss_mask: 0.596  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7602  time: 0.1050  data_time: 0.0017  lr: 0.00039961  max_mem: 1706M
[32m[11/12 18:43:39 d2.utils.events]: [0m eta: 0:16:48  iter: 59  total_loss: 2.162  loss_cls: 0.2656  loss_box_reg: 0.1073  loss_mask: 0.5856  loss_rpn_cls: 0.5829  loss_rpn_loc: 0.6636  time: 0.1039  data_time: 0.0016  lr: 0.00059941  max_mem: 1706M
[32m[11/12 18:43:42 d2.utils.events]: [0m eta: 0:16:48  iter: 79  total_loss: 2.209  loss_cls: 0.2721  loss_box_reg: 0.1986  loss_mask: 0.5605  loss_rpn_cls: 0.5419  loss_rpn_loc: 0.5534  time: 0.1040  data_time: 0.0016  lr: 0.00079921  max_mem: 1781M
[32m[11/12 18:43:44 d2.utils.events]: [0m eta: 0:17:01  iter: 99  total_loss: 2.171  loss_cls: 0.2702  loss_box_reg: 0.3607  loss_mask: 0.5389  loss_rpn_cls: 0.4615  loss_rpn_loc: 0.5096  time: 0.1052  data_time: 0.0017  lr: 0.00099901  max_mem: 1781M
[32m[11/12 18:43:46 d2.utils.events]: [0m eta: 0:17:02  iter: 119  total_loss: 2.09  loss_cls: 0.2802  loss_box_reg: 0.4088  loss_mask: 0.5108  loss_rpn_cls: 0.3903  loss_rpn_loc: 0.5165  time: 0.1057  data_time: 0.0017  lr: 0.0011988  max_mem: 1781M
[32m[11/12 18:43:48 d2.utils.events]: [0m eta: 0:17:04  iter: 139  total_loss: 2.049  loss_cls: 0.2938  loss_box_reg: 0.4439  loss_mask: 0.4672  loss_rpn_cls: 0.344  loss_rpn_loc: 0.4673  time: 0.1062  data_time: 0.0018  lr: 0.0013986  max_mem: 1781M
[32m[11/12 18:43:50 d2.utils.events]: [0m eta: 0:17:07  iter: 159  total_loss: 1.998  loss_cls: 0.2676  loss_box_reg: 0.4317  loss_mask: 0.4426  loss_rpn_cls: 0.3471  loss_rpn_loc: 0.4945  time: 0.1068  data_time: 0.0017  lr: 0.0015984  max_mem: 1781M
[32m[11/12 18:43:53 d2.utils.events]: [0m eta: 0:17:09  iter: 179  total_loss: 1.917  loss_cls: 0.261  loss_box_reg: 0.4888  loss_mask: 0.4088  loss_rpn_cls: 0.2862  loss_rpn_loc: 0.4502  time: 0.1071  data_time: 0.0017  lr: 0.0017982  max_mem: 1781M
[32m[11/12 18:43:55 d2.utils.events]: [0m eta: 0:17:12  iter: 199  total_loss: 1.78  loss_cls: 0.2521  loss_box_reg: 0.4239  loss_mask: 0.3841  loss_rpn_cls: 0.2707  loss_rpn_loc: 0.4508  time: 0.1075  data_time: 0.0017  lr: 0.001998  max_mem: 1781M
[32m[11/12 18:43:57 d2.utils.events]: [0m eta: 0:17:11  iter: 219  total_loss: 1.754  loss_cls: 0.2376  loss_box_reg: 0.3915  loss_mask: 0.3458  loss_rpn_cls: 0.2352  loss_rpn_loc: 0.4423  time: 0.1078  data_time: 0.0016  lr: 0.0021978  max_mem: 1781M
[32m[11/12 18:43:59 d2.utils.events]: [0m eta: 0:17:18  iter: 239  total_loss: 1.632  loss_cls: 0.2372  loss_box_reg: 0.4036  loss_mask: 0.361  loss_rpn_cls: 0.249  loss_rpn_loc: 0.4392  time: 0.1080  data_time: 0.0016  lr: 0.0023976  max_mem: 1781M
[32m[11/12 18:44:02 d2.utils.events]: [0m eta: 0:17:19  iter: 259  total_loss: 1.633  loss_cls: 0.222  loss_box_reg: 0.4547  loss_mask: 0.3272  loss_rpn_cls: 0.224  loss_rpn_loc: 0.4254  time: 0.1084  data_time: 0.0017  lr: 0.0025974  max_mem: 1781M
[32m[11/12 18:44:04 d2.utils.events]: [0m eta: 0:17:20  iter: 279  total_loss: 1.615  loss_cls: 0.21  loss_box_reg: 0.4265  loss_mask: 0.3232  loss_rpn_cls: 0.2176  loss_rpn_loc: 0.4197  time: 0.1087  data_time: 0.0016  lr: 0.0027972  max_mem: 1831M
[32m[11/12 18:44:06 d2.utils.events]: [0m eta: 0:17:21  iter: 299  total_loss: 1.603  loss_cls: 0.2167  loss_box_reg: 0.4616  loss_mask: 0.3009  loss_rpn_cls: 0.215  loss_rpn_loc: 0.4013  time: 0.1091  data_time: 0.0017  lr: 0.002997  max_mem: 1831M
[32m[11/12 18:44:08 d2.utils.events]: [0m eta: 0:17:21  iter: 319  total_loss: 1.588  loss_cls: 0.2117  loss_box_reg: 0.458  loss_mask: 0.2952  loss_rpn_cls: 0.205  loss_rpn_loc: 0.4257  time: 0.1092  data_time: 0.0017  lr: 0.0031968  max_mem: 1831M
[32m[11/12 18:44:11 d2.utils.events]: [0m eta: 0:17:23  iter: 339  total_loss: 1.61  loss_cls: 0.2056  loss_box_reg: 0.4487  loss_mask: 0.3096  loss_rpn_cls: 0.2374  loss_rpn_loc: 0.4279  time: 0.1095  data_time: 0.0018  lr: 0.0033966  max_mem: 1831M
[32m[11/12 18:44:13 d2.utils.events]: [0m eta: 0:17:28  iter: 359  total_loss: 1.618  loss_cls: 0.2334  loss_box_reg: 0.495  loss_mask: 0.2948  loss_rpn_cls: 0.217  loss_rpn_loc: 0.3947  time: 0.1098  data_time: 0.0016  lr: 0.0035964  max_mem: 1831M
[32m[11/12 18:44:15 d2.utils.events]: [0m eta: 0:17:28  iter: 379  total_loss: 1.505  loss_cls: 0.1975  loss_box_reg: 0.3841  loss_mask: 0.3002  loss_rpn_cls: 0.1926  loss_rpn_loc: 0.4036  time: 0.1099  data_time: 0.0018  lr: 0.0037962  max_mem: 1831M
[32m[11/12 18:44:18 d2.utils.events]: [0m eta: 0:17:32  iter: 399  total_loss: 1.553  loss_cls: 0.1955  loss_box_reg: 0.3937  loss_mask: 0.2846  loss_rpn_cls: 0.2201  loss_rpn_loc: 0.419  time: 0.1100  data_time: 0.0016  lr: 0.003996  max_mem: 1831M
[32m[11/12 18:44:20 d2.utils.events]: [0m eta: 0:17:34  iter: 419  total_loss: 1.572  loss_cls: 0.2398  loss_box_reg: 0.4727  loss_mask: 0.2889  loss_rpn_cls: 0.176  loss_rpn_loc: 0.3842  time: 0.1102  data_time: 0.0017  lr: 0.0041958  max_mem: 1831M
[32m[11/12 18:44:22 d2.utils.events]: [0m eta: 0:17:34  iter: 439  total_loss: 1.579  loss_cls: 0.2225  loss_box_reg: 0.4565  loss_mask: 0.2697  loss_rpn_cls: 0.2053  loss_rpn_loc: 0.3891  time: 0.1104  data_time: 0.0016  lr: 0.0043956  max_mem: 1831M
[32m[11/12 18:44:24 d2.utils.events]: [0m eta: 0:17:33  iter: 459  total_loss: 1.503  loss_cls: 0.2086  loss_box_reg: 0.458  loss_mask: 0.2673  loss_rpn_cls: 0.1792  loss_rpn_loc: 0.4001  time: 0.1105  data_time: 0.0017  lr: 0.0045954  max_mem: 1831M
[32m[11/12 18:44:27 d2.utils.events]: [0m eta: 0:17:31  iter: 479  total_loss: 1.648  loss_cls: 0.2507  loss_box_reg: 0.4477  loss_mask: 0.2707  loss_rpn_cls: 0.2338  loss_rpn_loc: 0.412  time: 0.1106  data_time: 0.0019  lr: 0.0047952  max_mem: 1831M
[32m[11/12 18:44:29 d2.utils.events]: [0m eta: 0:17:32  iter: 499  total_loss: 1.518  loss_cls: 0.2307  loss_box_reg: 0.4698  loss_mask: 0.2515  loss_rpn_cls: 0.1788  loss_rpn_loc: 0.3971  time: 0.1107  data_time: 0.0015  lr: 0.004995  max_mem: 1831M
[32m[11/12 18:44:31 d2.utils.events]: [0m eta: 0:17:30  iter: 519  total_loss: 1.536  loss_cls: 0.2335  loss_box_reg: 0.4728  loss_mask: 0.2649  loss_rpn_cls: 0.1682  loss_rpn_loc: 0.4132  time: 0.1108  data_time: 0.0016  lr: 0.0051948  max_mem: 1831M
[32m[11/12 18:44:34 d2.utils.events]: [0m eta: 0:17:30  iter: 539  total_loss: 1.555  loss_cls: 0.2257  loss_box_reg: 0.4671  loss_mask: 0.25  loss_rpn_cls: 0.1761  loss_rpn_loc: 0.3514  time: 0.1109  data_time: 0.0017  lr: 0.0053946  max_mem: 1831M
[32m[11/12 18:44:36 d2.utils.events]: [0m eta: 0:17:29  iter: 559  total_loss: 1.447  loss_cls: 0.2016  loss_box_reg: 0.4313  loss_mask: 0.2414  loss_rpn_cls: 0.1876  loss_rpn_loc: 0.3881  time: 0.1110  data_time: 0.0017  lr: 0.0055944  max_mem: 1831M
[32m[11/12 18:44:38 d2.utils.events]: [0m eta: 0:17:31  iter: 579  total_loss: 1.402  loss_cls: 0.1811  loss_box_reg: 0.4362  loss_mask: 0.238  loss_rpn_cls: 0.1789  loss_rpn_loc: 0.3934  time: 0.1112  data_time: 0.0016  lr: 0.0057942  max_mem: 1831M
[32m[11/12 18:44:41 d2.utils.events]: [0m eta: 0:17:29  iter: 599  total_loss: 1.477  loss_cls: 0.1981  loss_box_reg: 0.3658  loss_mask: 0.2492  loss_rpn_cls: 0.2306  loss_rpn_loc: 0.4096  time: 0.1112  data_time: 0.0018  lr: 0.005994  max_mem: 1831M
[32m[11/12 18:44:43 d2.utils.events]: [0m eta: 0:17:27  iter: 619  total_loss: 1.453  loss_cls: 0.2212  loss_box_reg: 0.4492  loss_mask: 0.2456  loss_rpn_cls: 0.1723  loss_rpn_loc: 0.4136  time: 0.1113  data_time: 0.0016  lr: 0.0061938  max_mem: 1831M
[32m[11/12 18:44:45 d2.utils.events]: [0m eta: 0:17:29  iter: 639  total_loss: 1.382  loss_cls: 0.1844  loss_box_reg: 0.4328  loss_mask: 0.2361  loss_rpn_cls: 0.1348  loss_rpn_loc: 0.3526  time: 0.1114  data_time: 0.0017  lr: 0.0063936  max_mem: 1831M
[32m[11/12 18:44:48 d2.utils.events]: [0m eta: 0:17:25  iter: 659  total_loss: 1.382  loss_cls: 0.192  loss_box_reg: 0.4192  loss_mask: 0.2508  loss_rpn_cls: 0.151  loss_rpn_loc: 0.3467  time: 0.1115  data_time: 0.0017  lr: 0.0065934  max_mem: 1831M
[32m[11/12 18:44:50 d2.utils.events]: [0m eta: 0:17:25  iter: 679  total_loss: 1.354  loss_cls: 0.1796  loss_box_reg: 0.4275  loss_mask: 0.2288  loss_rpn_cls: 0.159  loss_rpn_loc: 0.3595  time: 0.1116  data_time: 0.0017  lr: 0.0067932  max_mem: 1831M
[32m[11/12 18:44:52 d2.utils.events]: [0m eta: 0:17:23  iter: 699  total_loss: 1.303  loss_cls: 0.1635  loss_box_reg: 0.3794  loss_mask: 0.2304  loss_rpn_cls: 0.1429  loss_rpn_loc: 0.3895  time: 0.1116  data_time: 0.0018  lr: 0.006993  max_mem: 1831M
[32m[11/12 18:44:54 d2.utils.events]: [0m eta: 0:17:19  iter: 719  total_loss: 1.327  loss_cls: 0.1725  loss_box_reg: 0.4057  loss_mask: 0.2301  loss_rpn_cls: 0.1445  loss_rpn_loc: 0.3746  time: 0.1116  data_time: 0.0017  lr: 0.0071928  max_mem: 1831M
[32m[11/12 18:44:57 d2.utils.events]: [0m eta: 0:17:18  iter: 739  total_loss: 1.345  loss_cls: 0.1917  loss_box_reg: 0.4456  loss_mask: 0.2374  loss_rpn_cls: 0.1348  loss_rpn_loc: 0.3638  time: 0.1118  data_time: 0.0017  lr: 0.0073926  max_mem: 1831M
[32m[11/12 18:44:59 d2.utils.events]: [0m eta: 0:17:17  iter: 759  total_loss: 1.364  loss_cls: 0.1664  loss_box_reg: 0.411  loss_mask: 0.2275  loss_rpn_cls: 0.1604  loss_rpn_loc: 0.3773  time: 0.1118  data_time: 0.0017  lr: 0.0075924  max_mem: 1831M
[32m[11/12 18:45:01 d2.utils.events]: [0m eta: 0:17:16  iter: 779  total_loss: 1.31  loss_cls: 0.1881  loss_box_reg: 0.4241  loss_mask: 0.22  loss_rpn_cls: 0.1362  loss_rpn_loc: 0.351  time: 0.1119  data_time: 0.0017  lr: 0.0077922  max_mem: 1831M
[32m[11/12 18:45:04 d2.utils.events]: [0m eta: 0:17:12  iter: 799  total_loss: 1.403  loss_cls: 0.1899  loss_box_reg: 0.4278  loss_mask: 0.2262  loss_rpn_cls: 0.1858  loss_rpn_loc: 0.3843  time: 0.1119  data_time: 0.0017  lr: 0.007992  max_mem: 1831M
[32m[11/12 18:45:06 d2.utils.events]: [0m eta: 0:17:10  iter: 819  total_loss: 1.354  loss_cls: 0.1928  loss_box_reg: 0.4215  loss_mask: 0.2331  loss_rpn_cls: 0.1632  loss_rpn_loc: 0.3775  time: 0.1119  data_time: 0.0017  lr: 0.0081918  max_mem: 1831M
[32m[11/12 18:45:08 d2.utils.events]: [0m eta: 0:17:09  iter: 839  total_loss: 1.443  loss_cls: 0.2036  loss_box_reg: 0.4466  loss_mask: 0.2349  loss_rpn_cls: 0.1673  loss_rpn_loc: 0.3901  time: 0.1119  data_time: 0.0018  lr: 0.0083916  max_mem: 1831M
[32m[11/12 18:45:10 d2.utils.events]: [0m eta: 0:17:07  iter: 859  total_loss: 1.306  loss_cls: 0.1871  loss_box_reg: 0.4217  loss_mask: 0.2114  loss_rpn_cls: 0.1535  loss_rpn_loc: 0.3334  time: 0.1119  data_time: 0.0018  lr: 0.0085914  max_mem: 1831M
[32m[11/12 18:45:13 d2.utils.events]: [0m eta: 0:17:04  iter: 879  total_loss: 1.32  loss_cls: 0.16  loss_box_reg: 0.3922  loss_mask: 0.2154  loss_rpn_cls: 0.1733  loss_rpn_loc: 0.3916  time: 0.1119  data_time: 0.0018  lr: 0.0087912  max_mem: 1831M
