[W Context.cpp:70] Warning: torch.use_deterministic_algorithms is in beta, and its design and functionality may change in the future. (function operator())
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[11/14 11:02:17 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[11/14 11:02:17 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[11/14 11:02:17 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
| satellite  | 1412         |
|            |              |[0m
[32m[11/14 11:02:17 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[11/14 11:02:17 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[11/14 11:02:17 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[11/14 11:02:17 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[11/14 11:02:17 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[11/14 11:02:18 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[11/14 11:02:18 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[11/14 11:02:18 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[11/14 11:02:21 d2.utils.events]: [0m eta: 0:25:20  iter: 19  total_loss: 3.305  loss_cls: 0.5145  loss_box_reg: 0.02811  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1580  data_time: 0.0218  lr: 0.00019981  max_mem: 1617M
[32m[11/14 11:02:24 d2.utils.events]: [0m eta: 0:25:08  iter: 39  total_loss: 2.366  loss_cls: 0.3478  loss_box_reg: 0.04296  loss_mask: 0.5959  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7602  time: 0.1525  data_time: 0.0017  lr: 0.00039961  max_mem: 1702M
[32m[11/14 11:02:27 d2.utils.events]: [0m eta: 0:25:05  iter: 59  total_loss: 2.147  loss_cls: 0.2666  loss_box_reg: 0.09315  loss_mask: 0.5849  loss_rpn_cls: 0.583  loss_rpn_loc: 0.663  time: 0.1522  data_time: 0.0016  lr: 0.00059941  max_mem: 1702M
[32m[11/14 11:02:31 d2.utils.events]: [0m eta: 0:25:02  iter: 79  total_loss: 2.189  loss_cls: 0.2605  loss_box_reg: 0.1939  loss_mask: 0.5591  loss_rpn_cls: 0.5418  loss_rpn_loc: 0.553  time: 0.1531  data_time: 0.0016  lr: 0.00079921  max_mem: 1778M
[32m[11/14 11:02:34 d2.utils.events]: [0m eta: 0:25:21  iter: 99  total_loss: 2.124  loss_cls: 0.2714  loss_box_reg: 0.335  loss_mask: 0.5414  loss_rpn_cls: 0.461  loss_rpn_loc: 0.5064  time: 0.1554  data_time: 0.0018  lr: 0.00099901  max_mem: 1778M
[32m[11/14 11:02:37 d2.utils.events]: [0m eta: 0:25:28  iter: 119  total_loss: 2.104  loss_cls: 0.3125  loss_box_reg: 0.4052  loss_mask: 0.5144  loss_rpn_cls: 0.3895  loss_rpn_loc: 0.5206  time: 0.1567  data_time: 0.0018  lr: 0.0011988  max_mem: 1778M
[32m[11/14 11:02:40 d2.utils.events]: [0m eta: 0:25:32  iter: 139  total_loss: 2.08  loss_cls: 0.3157  loss_box_reg: 0.4592  loss_mask: 0.4727  loss_rpn_cls: 0.3441  loss_rpn_loc: 0.4667  time: 0.1577  data_time: 0.0019  lr: 0.0013986  max_mem: 1778M
[32m[11/14 11:02:44 d2.utils.events]: [0m eta: 0:25:38  iter: 159  total_loss: 1.949  loss_cls: 0.2527  loss_box_reg: 0.4575  loss_mask: 0.4324  loss_rpn_cls: 0.3306  loss_rpn_loc: 0.4664  time: 0.1589  data_time: 0.0018  lr: 0.0015984  max_mem: 1778M
[32m[11/14 11:02:47 d2.utils.events]: [0m eta: 0:25:41  iter: 179  total_loss: 1.852  loss_cls: 0.2592  loss_box_reg: 0.4476  loss_mask: 0.4043  loss_rpn_cls: 0.292  loss_rpn_loc: 0.4461  time: 0.1595  data_time: 0.0018  lr: 0.0017982  max_mem: 1778M
[32m[11/14 11:02:50 d2.utils.events]: [0m eta: 0:25:57  iter: 199  total_loss: 1.791  loss_cls: 0.2523  loss_box_reg: 0.4211  loss_mask: 0.3803  loss_rpn_cls: 0.267  loss_rpn_loc: 0.465  time: 0.1602  data_time: 0.0017  lr: 0.001998  max_mem: 1778M
[32m[11/14 11:02:54 d2.utils.events]: [0m eta: 0:25:54  iter: 219  total_loss: 1.726  loss_cls: 0.2391  loss_box_reg: 0.3573  loss_mask: 0.3694  loss_rpn_cls: 0.2805  loss_rpn_loc: 0.4675  time: 0.1605  data_time: 0.0017  lr: 0.0021978  max_mem: 1778M
[32m[11/14 11:02:57 d2.utils.events]: [0m eta: 0:25:55  iter: 239  total_loss: 1.739  loss_cls: 0.2307  loss_box_reg: 0.4042  loss_mask: 0.3299  loss_rpn_cls: 0.2726  loss_rpn_loc: 0.4195  time: 0.1612  data_time: 0.0018  lr: 0.0023976  max_mem: 1778M
[32m[11/14 11:03:01 d2.utils.events]: [0m eta: 0:25:56  iter: 259  total_loss: 1.67  loss_cls: 0.2395  loss_box_reg: 0.4486  loss_mask: 0.3316  loss_rpn_cls: 0.2359  loss_rpn_loc: 0.4067  time: 0.1619  data_time: 0.0018  lr: 0.0025974  max_mem: 1778M
[32m[11/14 11:03:04 d2.utils.events]: [0m eta: 0:26:00  iter: 279  total_loss: 1.651  loss_cls: 0.2409  loss_box_reg: 0.461  loss_mask: 0.3094  loss_rpn_cls: 0.2102  loss_rpn_loc: 0.4312  time: 0.1627  data_time: 0.0017  lr: 0.0027972  max_mem: 1827M
[32m[11/14 11:03:07 d2.utils.events]: [0m eta: 0:26:05  iter: 299  total_loss: 1.616  loss_cls: 0.2646  loss_box_reg: 0.4842  loss_mask: 0.3013  loss_rpn_cls: 0.2172  loss_rpn_loc: 0.3758  time: 0.1634  data_time: 0.0019  lr: 0.002997  max_mem: 1827M
[32m[11/14 11:03:11 d2.utils.events]: [0m eta: 0:26:08  iter: 319  total_loss: 1.642  loss_cls: 0.2617  loss_box_reg: 0.4379  loss_mask: 0.2997  loss_rpn_cls: 0.2024  loss_rpn_loc: 0.4174  time: 0.1636  data_time: 0.0017  lr: 0.0031968  max_mem: 1827M
[32m[11/14 11:03:14 d2.utils.events]: [0m eta: 0:26:09  iter: 339  total_loss: 1.718  loss_cls: 0.2381  loss_box_reg: 0.4724  loss_mask: 0.3064  loss_rpn_cls: 0.222  loss_rpn_loc: 0.4274  time: 0.1641  data_time: 0.0017  lr: 0.0033966  max_mem: 1827M
[32m[11/14 11:03:18 d2.utils.events]: [0m eta: 0:26:13  iter: 359  total_loss: 1.654  loss_cls: 0.238  loss_box_reg: 0.4809  loss_mask: 0.2841  loss_rpn_cls: 0.2045  loss_rpn_loc: 0.3892  time: 0.1645  data_time: 0.0017  lr: 0.0035964  max_mem: 1827M
[32m[11/14 11:03:21 d2.utils.events]: [0m eta: 0:26:16  iter: 379  total_loss: 1.583  loss_cls: 0.2466  loss_box_reg: 0.4643  loss_mask: 0.2803  loss_rpn_cls: 0.2008  loss_rpn_loc: 0.4256  time: 0.1648  data_time: 0.0018  lr: 0.0037962  max_mem: 1827M
[32m[11/14 11:03:25 d2.utils.events]: [0m eta: 0:26:20  iter: 399  total_loss: 1.558  loss_cls: 0.1955  loss_box_reg: 0.449  loss_mask: 0.275  loss_rpn_cls: 0.2151  loss_rpn_loc: 0.4191  time: 0.1650  data_time: 0.0018  lr: 0.003996  max_mem: 1827M
[32m[11/14 11:03:28 d2.utils.events]: [0m eta: 0:26:19  iter: 419  total_loss: 1.489  loss_cls: 0.2041  loss_box_reg: 0.4165  loss_mask: 0.2699  loss_rpn_cls: 0.1955  loss_rpn_loc: 0.3868  time: 0.1652  data_time: 0.0019  lr: 0.0041958  max_mem: 1827M
[32m[11/14 11:03:31 d2.utils.events]: [0m eta: 0:26:21  iter: 439  total_loss: 1.471  loss_cls: 0.1981  loss_box_reg: 0.4201  loss_mask: 0.2643  loss_rpn_cls: 0.2086  loss_rpn_loc: 0.3885  time: 0.1653  data_time: 0.0016  lr: 0.0043956  max_mem: 1827M
[32m[11/14 11:03:35 d2.utils.events]: [0m eta: 0:26:14  iter: 459  total_loss: 1.509  loss_cls: 0.2079  loss_box_reg: 0.4609  loss_mask: 0.2636  loss_rpn_cls: 0.1787  loss_rpn_loc: 0.4026  time: 0.1654  data_time: 0.0018  lr: 0.0045954  max_mem: 1827M
[32m[11/14 11:03:38 d2.utils.events]: [0m eta: 0:26:14  iter: 479  total_loss: 1.595  loss_cls: 0.2555  loss_box_reg: 0.473  loss_mask: 0.2619  loss_rpn_cls: 0.2308  loss_rpn_loc: 0.4208  time: 0.1655  data_time: 0.0019  lr: 0.0047952  max_mem: 1827M
[32m[11/14 11:03:42 d2.utils.events]: [0m eta: 0:26:17  iter: 499  total_loss: 1.536  loss_cls: 0.2236  loss_box_reg: 0.4713  loss_mask: 0.2467  loss_rpn_cls: 0.1786  loss_rpn_loc: 0.3766  time: 0.1657  data_time: 0.0015  lr: 0.004995  max_mem: 1827M
[32m[11/14 11:03:45 d2.utils.events]: [0m eta: 0:26:14  iter: 519  total_loss: 1.582  loss_cls: 0.2475  loss_box_reg: 0.4484  loss_mask: 0.2545  loss_rpn_cls: 0.1596  loss_rpn_loc: 0.4145  time: 0.1657  data_time: 0.0017  lr: 0.0051948  max_mem: 1827M
[32m[11/14 11:03:48 d2.utils.events]: [0m eta: 0:26:17  iter: 539  total_loss: 1.625  loss_cls: 0.2395  loss_box_reg: 0.498  loss_mask: 0.2468  loss_rpn_cls: 0.1793  loss_rpn_loc: 0.3975  time: 0.1660  data_time: 0.0017  lr: 0.0053946  max_mem: 1827M
[32m[11/14 11:03:52 d2.utils.events]: [0m eta: 0:26:24  iter: 559  total_loss: 1.558  loss_cls: 0.2177  loss_box_reg: 0.4433  loss_mask: 0.2575  loss_rpn_cls: 0.1749  loss_rpn_loc: 0.407  time: 0.1662  data_time: 0.0019  lr: 0.0055944  max_mem: 1827M
[32m[11/14 11:03:55 d2.utils.events]: [0m eta: 0:26:28  iter: 579  total_loss: 1.46  loss_cls: 0.2146  loss_box_reg: 0.4378  loss_mask: 0.2579  loss_rpn_cls: 0.1616  loss_rpn_loc: 0.402  time: 0.1664  data_time: 0.0017  lr: 0.0057942  max_mem: 1827M
[32m[11/14 11:03:59 d2.utils.events]: [0m eta: 0:26:33  iter: 599  total_loss: 1.491  loss_cls: 0.2218  loss_box_reg: 0.455  loss_mask: 0.255  loss_rpn_cls: 0.2114  loss_rpn_loc: 0.3555  time: 0.1667  data_time: 0.0020  lr: 0.005994  max_mem: 1827M
[32m[11/14 11:04:02 d2.utils.events]: [0m eta: 0:26:30  iter: 619  total_loss: 1.542  loss_cls: 0.2421  loss_box_reg: 0.4695  loss_mask: 0.2568  loss_rpn_cls: 0.1696  loss_rpn_loc: 0.3923  time: 0.1667  data_time: 0.0017  lr: 0.0061938  max_mem: 1827M
[32m[11/14 11:04:06 d2.utils.events]: [0m eta: 0:26:30  iter: 639  total_loss: 1.435  loss_cls: 0.2207  loss_box_reg: 0.4548  loss_mask: 0.2305  loss_rpn_cls: 0.1663  loss_rpn_loc: 0.3452  time: 0.1670  data_time: 0.0020  lr: 0.0063936  max_mem: 1827M
[32m[11/14 11:04:09 d2.utils.events]: [0m eta: 0:26:27  iter: 659  total_loss: 1.465  loss_cls: 0.2208  loss_box_reg: 0.4516  loss_mask: 0.2349  loss_rpn_cls: 0.1844  loss_rpn_loc: 0.3667  time: 0.1671  data_time: 0.0018  lr: 0.0065934  max_mem: 1827M
[32m[11/14 11:04:13 d2.utils.events]: [0m eta: 0:26:24  iter: 679  total_loss: 1.373  loss_cls: 0.1972  loss_box_reg: 0.4069  loss_mask: 0.2564  loss_rpn_cls: 0.1515  loss_rpn_loc: 0.3851  time: 0.1672  data_time: 0.0019  lr: 0.0067932  max_mem: 1827M
[32m[11/14 11:04:16 d2.utils.events]: [0m eta: 0:26:21  iter: 699  total_loss: 1.374  loss_cls: 0.1928  loss_box_reg: 0.408  loss_mask: 0.2356  loss_rpn_cls: 0.1418  loss_rpn_loc: 0.3755  time: 0.1673  data_time: 0.0018  lr: 0.006993  max_mem: 1827M
[32m[11/14 11:04:19 d2.utils.events]: [0m eta: 0:26:18  iter: 719  total_loss: 1.406  loss_cls: 0.1974  loss_box_reg: 0.4353  loss_mask: 0.2487  loss_rpn_cls: 0.1497  loss_rpn_loc: 0.3876  time: 0.1673  data_time: 0.0017  lr: 0.0071928  max_mem: 1827M
[32m[11/14 11:04:23 d2.utils.events]: [0m eta: 0:26:14  iter: 739  total_loss: 1.34  loss_cls: 0.1365  loss_box_reg: 0.386  loss_mask: 0.2235  loss_rpn_cls: 0.1618  loss_rpn_loc: 0.4009  time: 0.1673  data_time: 0.0018  lr: 0.0073926  max_mem: 1827M
[32m[11/14 11:04:26 d2.utils.events]: [0m eta: 0:26:11  iter: 759  total_loss: 1.345  loss_cls: 0.183  loss_box_reg: 0.4269  loss_mask: 0.2299  loss_rpn_cls: 0.1515  loss_rpn_loc: 0.3588  time: 0.1674  data_time: 0.0017  lr: 0.0075924  max_mem: 1827M
[32m[11/14 11:04:30 d2.utils.events]: [0m eta: 0:26:10  iter: 779  total_loss: 1.408  loss_cls: 0.2091  loss_box_reg: 0.4405  loss_mask: 0.2337  loss_rpn_cls: 0.1361  loss_rpn_loc: 0.3745  time: 0.1676  data_time: 0.0018  lr: 0.0077922  max_mem: 1827M
[32m[11/14 11:04:33 d2.utils.events]: [0m eta: 0:26:05  iter: 799  total_loss: 1.395  loss_cls: 0.2064  loss_box_reg: 0.4575  loss_mask: 0.2179  loss_rpn_cls: 0.1594  loss_rpn_loc: 0.353  time: 0.1675  data_time: 0.0016  lr: 0.007992  max_mem: 1827M
[32m[11/14 11:04:37 d2.utils.events]: [0m eta: 0:26:02  iter: 819  total_loss: 1.365  loss_cls: 0.1964  loss_box_reg: 0.4374  loss_mask: 0.2193  loss_rpn_cls: 0.1471  loss_rpn_loc: 0.3893  time: 0.1676  data_time: 0.0018  lr: 0.0081918  max_mem: 1827M
[32m[11/14 11:04:40 d2.utils.events]: [0m eta: 0:26:00  iter: 839  total_loss: 1.385  loss_cls: 0.2155  loss_box_reg: 0.4317  loss_mask: 0.228  loss_rpn_cls: 0.1445  loss_rpn_loc: 0.3472  time: 0.1676  data_time: 0.0018  lr: 0.0083916  max_mem: 1827M
[32m[11/14 11:04:43 d2.utils.events]: [0m eta: 0:25:57  iter: 859  total_loss: 1.351  loss_cls: 0.1901  loss_box_reg: 0.4221  loss_mask: 0.2117  loss_rpn_cls: 0.1607  loss_rpn_loc: 0.3586  time: 0.1677  data_time: 0.0018  lr: 0.0085914  max_mem: 1827M
