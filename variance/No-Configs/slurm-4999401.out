Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_5S_500x.png
	num_instances: 65
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S04_01_SE1_1000X45.png
	num_instances: 41
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_10S_500x.png
	num_instances: 32
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[11/11 18:08:22 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[11/11 18:08:23 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[11/11 18:08:23 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
| satellite  | 1412         |
|            |              |[0m
[32m[11/11 18:08:23 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[11/11 18:08:23 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[11/11 18:08:23 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[11/11 18:08:23 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[11/11 18:08:23 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[11/11 18:08:23 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[11/11 18:08:23 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[11/11 18:08:23 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[11/11 18:08:25 d2.utils.events]: [0m eta: 0:16:38  iter: 19  total_loss: 3.155  loss_cls: 0.5831  loss_box_reg: 0.03155  loss_mask: 0.6668  loss_rpn_cls: 0.6933  loss_rpn_loc: 1.158  time: 0.1016  data_time: 0.0131  lr: 0.00019981  max_mem: 1700M
[32m[11/11 18:08:27 d2.utils.events]: [0m eta: 0:16:43  iter: 39  total_loss: 2.403  loss_cls: 0.3014  loss_box_reg: 0.04812  loss_mask: 0.601  loss_rpn_cls: 0.6084  loss_rpn_loc: 0.808  time: 0.1015  data_time: 0.0016  lr: 0.00039961  max_mem: 1700M
[32m[11/11 18:08:30 d2.utils.events]: [0m eta: 0:16:42  iter: 59  total_loss: 2.115  loss_cls: 0.2642  loss_box_reg: 0.07766  loss_mask: 0.5731  loss_rpn_cls: 0.5609  loss_rpn_loc: 0.5847  time: 0.1020  data_time: 0.0016  lr: 0.00059941  max_mem: 1714M
[32m[11/11 18:08:32 d2.utils.events]: [0m eta: 0:16:45  iter: 79  total_loss: 2.302  loss_cls: 0.2762  loss_box_reg: 0.2496  loss_mask: 0.5766  loss_rpn_cls: 0.5512  loss_rpn_loc: 0.5424  time: 0.1024  data_time: 0.0014  lr: 0.00079921  max_mem: 1800M
[32m[11/11 18:08:34 d2.utils.events]: [0m eta: 0:16:59  iter: 99  total_loss: 2.277  loss_cls: 0.3387  loss_box_reg: 0.3099  loss_mask: 0.5416  loss_rpn_cls: 0.5037  loss_rpn_loc: 0.528  time: 0.1038  data_time: 0.0015  lr: 0.00099901  max_mem: 1800M
[32m[11/11 18:08:36 d2.utils.events]: [0m eta: 0:17:00  iter: 119  total_loss: 2.199  loss_cls: 0.279  loss_box_reg: 0.4354  loss_mask: 0.5219  loss_rpn_cls: 0.4325  loss_rpn_loc: 0.5069  time: 0.1043  data_time: 0.0016  lr: 0.0011988  max_mem: 1800M
[32m[11/11 18:08:38 d2.utils.events]: [0m eta: 0:17:07  iter: 139  total_loss: 2.096  loss_cls: 0.3055  loss_box_reg: 0.41  loss_mask: 0.5022  loss_rpn_cls: 0.374  loss_rpn_loc: 0.5203  time: 0.1048  data_time: 0.0016  lr: 0.0013986  max_mem: 1800M
[32m[11/11 18:08:40 d2.utils.events]: [0m eta: 0:17:11  iter: 159  total_loss: 1.937  loss_cls: 0.2406  loss_box_reg: 0.4604  loss_mask: 0.472  loss_rpn_cls: 0.3172  loss_rpn_loc: 0.4927  time: 0.1059  data_time: 0.0015  lr: 0.0015984  max_mem: 1800M
[32m[11/11 18:08:43 d2.utils.events]: [0m eta: 0:17:10  iter: 179  total_loss: 2.008  loss_cls: 0.3003  loss_box_reg: 0.4444  loss_mask: 0.4465  loss_rpn_cls: 0.2844  loss_rpn_loc: 0.4953  time: 0.1062  data_time: 0.0016  lr: 0.0017982  max_mem: 1824M
[32m[11/11 18:08:45 d2.utils.events]: [0m eta: 0:17:04  iter: 199  total_loss: 1.927  loss_cls: 0.2443  loss_box_reg: 0.3876  loss_mask: 0.4264  loss_rpn_cls: 0.2941  loss_rpn_loc: 0.5095  time: 0.1058  data_time: 0.0017  lr: 0.001998  max_mem: 1824M
[32m[11/11 18:08:47 d2.utils.events]: [0m eta: 0:17:04  iter: 219  total_loss: 1.896  loss_cls: 0.2824  loss_box_reg: 0.4248  loss_mask: 0.4169  loss_rpn_cls: 0.2494  loss_rpn_loc: 0.4872  time: 0.1059  data_time: 0.0016  lr: 0.0021978  max_mem: 1824M
[32m[11/11 18:08:49 d2.utils.events]: [0m eta: 0:17:02  iter: 239  total_loss: 1.861  loss_cls: 0.2821  loss_box_reg: 0.4332  loss_mask: 0.3793  loss_rpn_cls: 0.254  loss_rpn_loc: 0.4228  time: 0.1060  data_time: 0.0016  lr: 0.0023976  max_mem: 1824M
[32m[11/11 18:08:51 d2.utils.events]: [0m eta: 0:17:03  iter: 259  total_loss: 1.804  loss_cls: 0.2458  loss_box_reg: 0.4647  loss_mask: 0.3621  loss_rpn_cls: 0.2645  loss_rpn_loc: 0.439  time: 0.1062  data_time: 0.0015  lr: 0.0025974  max_mem: 1824M
[32m[11/11 18:08:53 d2.utils.events]: [0m eta: 0:17:06  iter: 279  total_loss: 1.73  loss_cls: 0.2604  loss_box_reg: 0.4487  loss_mask: 0.3362  loss_rpn_cls: 0.264  loss_rpn_loc: 0.4264  time: 0.1065  data_time: 0.0015  lr: 0.0027972  max_mem: 1824M
[32m[11/11 18:08:56 d2.utils.events]: [0m eta: 0:17:04  iter: 299  total_loss: 1.808  loss_cls: 0.2778  loss_box_reg: 0.4495  loss_mask: 0.3552  loss_rpn_cls: 0.2296  loss_rpn_loc: 0.4537  time: 0.1065  data_time: 0.0015  lr: 0.002997  max_mem: 1824M
[32m[11/11 18:08:58 d2.utils.events]: [0m eta: 0:17:02  iter: 319  total_loss: 1.736  loss_cls: 0.2358  loss_box_reg: 0.4543  loss_mask: 0.3453  loss_rpn_cls: 0.256  loss_rpn_loc: 0.4508  time: 0.1066  data_time: 0.0015  lr: 0.0031968  max_mem: 1824M
[32m[11/11 18:09:00 d2.utils.events]: [0m eta: 0:17:00  iter: 339  total_loss: 1.716  loss_cls: 0.2279  loss_box_reg: 0.4813  loss_mask: 0.3267  loss_rpn_cls: 0.2662  loss_rpn_loc: 0.4299  time: 0.1067  data_time: 0.0017  lr: 0.0033966  max_mem: 1824M
[32m[11/11 18:09:02 d2.utils.events]: [0m eta: 0:16:58  iter: 359  total_loss: 1.713  loss_cls: 0.2369  loss_box_reg: 0.4327  loss_mask: 0.3283  loss_rpn_cls: 0.2202  loss_rpn_loc: 0.4187  time: 0.1067  data_time: 0.0016  lr: 0.0035964  max_mem: 1824M
[32m[11/11 18:09:04 d2.utils.events]: [0m eta: 0:16:56  iter: 379  total_loss: 1.688  loss_cls: 0.2506  loss_box_reg: 0.4442  loss_mask: 0.3126  loss_rpn_cls: 0.2307  loss_rpn_loc: 0.4582  time: 0.1068  data_time: 0.0016  lr: 0.0037962  max_mem: 1824M
[32m[11/11 18:09:07 d2.utils.events]: [0m eta: 0:16:57  iter: 399  total_loss: 1.682  loss_cls: 0.2539  loss_box_reg: 0.4397  loss_mask: 0.3049  loss_rpn_cls: 0.237  loss_rpn_loc: 0.4711  time: 0.1069  data_time: 0.0016  lr: 0.003996  max_mem: 1824M
[32m[11/11 18:09:09 d2.utils.events]: [0m eta: 0:16:55  iter: 419  total_loss: 1.775  loss_cls: 0.2727  loss_box_reg: 0.4992  loss_mask: 0.3025  loss_rpn_cls: 0.2275  loss_rpn_loc: 0.4277  time: 0.1069  data_time: 0.0016  lr: 0.0041958  max_mem: 1824M
[32m[11/11 18:09:11 d2.utils.events]: [0m eta: 0:16:57  iter: 439  total_loss: 1.659  loss_cls: 0.2594  loss_box_reg: 0.4632  loss_mask: 0.3064  loss_rpn_cls: 0.182  loss_rpn_loc: 0.4183  time: 0.1072  data_time: 0.0017  lr: 0.0043956  max_mem: 1824M
[32m[11/11 18:09:13 d2.utils.events]: [0m eta: 0:17:04  iter: 459  total_loss: 1.594  loss_cls: 0.2463  loss_box_reg: 0.4825  loss_mask: 0.287  loss_rpn_cls: 0.1971  loss_rpn_loc: 0.422  time: 0.1074  data_time: 0.0015  lr: 0.0045954  max_mem: 1824M
[32m[11/11 18:09:16 d2.utils.events]: [0m eta: 0:17:04  iter: 479  total_loss: 1.59  loss_cls: 0.2343  loss_box_reg: 0.4481  loss_mask: 0.2916  loss_rpn_cls: 0.212  loss_rpn_loc: 0.4062  time: 0.1075  data_time: 0.0016  lr: 0.0047952  max_mem: 1824M
[32m[11/11 18:09:18 d2.utils.events]: [0m eta: 0:17:04  iter: 499  total_loss: 1.614  loss_cls: 0.2582  loss_box_reg: 0.5337  loss_mask: 0.2773  loss_rpn_cls: 0.1958  loss_rpn_loc: 0.3794  time: 0.1076  data_time: 0.0016  lr: 0.004995  max_mem: 1824M
[32m[11/11 18:09:20 d2.utils.events]: [0m eta: 0:17:05  iter: 519  total_loss: 1.571  loss_cls: 0.2168  loss_box_reg: 0.4476  loss_mask: 0.2754  loss_rpn_cls: 0.2162  loss_rpn_loc: 0.4165  time: 0.1078  data_time: 0.0016  lr: 0.0051948  max_mem: 1824M
[32m[11/11 18:09:22 d2.utils.events]: [0m eta: 0:17:03  iter: 539  total_loss: 1.675  loss_cls: 0.2358  loss_box_reg: 0.4582  loss_mask: 0.2737  loss_rpn_cls: 0.2585  loss_rpn_loc: 0.4183  time: 0.1078  data_time: 0.0016  lr: 0.0053946  max_mem: 1824M
[32m[11/11 18:09:25 d2.utils.events]: [0m eta: 0:17:01  iter: 559  total_loss: 1.65  loss_cls: 0.2421  loss_box_reg: 0.4643  loss_mask: 0.2791  loss_rpn_cls: 0.1894  loss_rpn_loc: 0.432  time: 0.1079  data_time: 0.0016  lr: 0.0055944  max_mem: 1824M
[32m[11/11 18:09:27 d2.utils.events]: [0m eta: 0:16:59  iter: 579  total_loss: 1.545  loss_cls: 0.2216  loss_box_reg: 0.4167  loss_mask: 0.269  loss_rpn_cls: 0.1743  loss_rpn_loc: 0.4324  time: 0.1080  data_time: 0.0014  lr: 0.0057942  max_mem: 1824M
[32m[11/11 18:09:29 d2.utils.events]: [0m eta: 0:16:57  iter: 599  total_loss: 1.555  loss_cls: 0.2226  loss_box_reg: 0.3959  loss_mask: 0.2745  loss_rpn_cls: 0.2015  loss_rpn_loc: 0.4093  time: 0.1080  data_time: 0.0015  lr: 0.005994  max_mem: 1824M
[32m[11/11 18:09:31 d2.utils.events]: [0m eta: 0:16:55  iter: 619  total_loss: 1.574  loss_cls: 0.2244  loss_box_reg: 0.4536  loss_mask: 0.2647  loss_rpn_cls: 0.2061  loss_rpn_loc: 0.407  time: 0.1081  data_time: 0.0016  lr: 0.0061938  max_mem: 1824M
[32m[11/11 18:09:33 d2.utils.events]: [0m eta: 0:16:55  iter: 639  total_loss: 1.499  loss_cls: 0.25  loss_box_reg: 0.4626  loss_mask: 0.2499  loss_rpn_cls: 0.1535  loss_rpn_loc: 0.4003  time: 0.1082  data_time: 0.0015  lr: 0.0063936  max_mem: 1824M
[32m[11/11 18:09:36 d2.utils.events]: [0m eta: 0:16:51  iter: 659  total_loss: 1.631  loss_cls: 0.2512  loss_box_reg: 0.4927  loss_mask: 0.2563  loss_rpn_cls: 0.1938  loss_rpn_loc: 0.4075  time: 0.1082  data_time: 0.0017  lr: 0.0065934  max_mem: 1824M
[32m[11/11 18:09:38 d2.utils.events]: [0m eta: 0:16:49  iter: 679  total_loss: 1.566  loss_cls: 0.2292  loss_box_reg: 0.4444  loss_mask: 0.2636  loss_rpn_cls: 0.2233  loss_rpn_loc: 0.4172  time: 0.1082  data_time: 0.0014  lr: 0.0067932  max_mem: 1824M
[32m[11/11 18:09:40 d2.utils.events]: [0m eta: 0:16:47  iter: 699  total_loss: 1.471  loss_cls: 0.2026  loss_box_reg: 0.411  loss_mask: 0.2588  loss_rpn_cls: 0.1782  loss_rpn_loc: 0.4089  time: 0.1082  data_time: 0.0015  lr: 0.006993  max_mem: 1824M
[32m[11/11 18:09:42 d2.utils.events]: [0m eta: 0:16:47  iter: 719  total_loss: 1.534  loss_cls: 0.2411  loss_box_reg: 0.4691  loss_mask: 0.2611  loss_rpn_cls: 0.1817  loss_rpn_loc: 0.4056  time: 0.1083  data_time: 0.0016  lr: 0.0071928  max_mem: 1824M
