[W Context.cpp:70] Warning: torch.use_deterministic_algorithms is in beta, and its design and functionality may change in the future. (function operator())
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../SALAS_Rep/../../../../../../../ocean/projects/dmr200021p/sprice/initial_paper_complete_set/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[11/13 00:36:28 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[11/13 00:36:28 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[11/13 00:36:28 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
| satellite  | 1412         |
|            |              |[0m
[32m[11/13 00:36:28 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[11/13 00:36:28 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[11/13 00:36:28 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[11/13 00:36:28 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[11/13 00:36:28 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[11/13 00:36:29 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[11/13 00:36:29 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[11/13 00:36:29 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[11/13 00:36:32 d2.utils.events]: [0m eta: 0:24:59  iter: 19  total_loss: 3.303  loss_cls: 0.5148  loss_box_reg: 0.02782  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1522  data_time: 0.0197  lr: 0.00019981  max_mem: 1617M
[32m[11/13 00:36:36 d2.utils.events]: [0m eta: 0:25:24  iter: 39  total_loss: 2.37  loss_cls: 0.3472  loss_box_reg: 0.03898  loss_mask: 0.5968  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7598  time: 0.1546  data_time: 0.0019  lr: 0.00039961  max_mem: 1702M
[32m[11/13 00:36:39 d2.utils.events]: [0m eta: 0:25:20  iter: 59  total_loss: 2.165  loss_cls: 0.2652  loss_box_reg: 0.1044  loss_mask: 0.5852  loss_rpn_cls: 0.5828  loss_rpn_loc: 0.6627  time: 0.1542  data_time: 0.0017  lr: 0.00059941  max_mem: 1702M
[32m[11/13 00:36:42 d2.utils.events]: [0m eta: 0:25:17  iter: 79  total_loss: 2.204  loss_cls: 0.2695  loss_box_reg: 0.1803  loss_mask: 0.5624  loss_rpn_cls: 0.5421  loss_rpn_loc: 0.5538  time: 0.1549  data_time: 0.0018  lr: 0.00079921  max_mem: 1778M
[32m[11/13 00:36:45 d2.utils.events]: [0m eta: 0:25:35  iter: 99  total_loss: 2.167  loss_cls: 0.2733  loss_box_reg: 0.3778  loss_mask: 0.5359  loss_rpn_cls: 0.462  loss_rpn_loc: 0.512  time: 0.1571  data_time: 0.0019  lr: 0.00099901  max_mem: 1778M
[32m[11/13 00:36:48 d2.utils.events]: [0m eta: 0:25:49  iter: 119  total_loss: 2.072  loss_cls: 0.2887  loss_box_reg: 0.3848  loss_mask: 0.5127  loss_rpn_cls: 0.391  loss_rpn_loc: 0.5229  time: 0.1583  data_time: 0.0019  lr: 0.0011988  max_mem: 1778M
[32m[11/13 00:36:52 d2.utils.events]: [0m eta: 0:25:50  iter: 139  total_loss: 2.065  loss_cls: 0.2985  loss_box_reg: 0.4371  loss_mask: 0.4682  loss_rpn_cls: 0.3472  loss_rpn_loc: 0.4625  time: 0.1595  data_time: 0.0019  lr: 0.0013986  max_mem: 1778M
[32m[11/13 00:36:55 d2.utils.events]: [0m eta: 0:25:51  iter: 159  total_loss: 2.007  loss_cls: 0.2864  loss_box_reg: 0.4646  loss_mask: 0.4326  loss_rpn_cls: 0.3528  loss_rpn_loc: 0.486  time: 0.1606  data_time: 0.0019  lr: 0.0015984  max_mem: 1778M
[32m[11/13 00:36:59 d2.utils.events]: [0m eta: 0:25:59  iter: 179  total_loss: 1.874  loss_cls: 0.2445  loss_box_reg: 0.449  loss_mask: 0.4083  loss_rpn_cls: 0.2907  loss_rpn_loc: 0.4384  time: 0.1611  data_time: 0.0019  lr: 0.0017982  max_mem: 1778M
[32m[11/13 00:37:02 d2.utils.events]: [0m eta: 0:26:04  iter: 199  total_loss: 1.83  loss_cls: 0.2545  loss_box_reg: 0.4698  loss_mask: 0.3842  loss_rpn_cls: 0.265  loss_rpn_loc: 0.4491  time: 0.1620  data_time: 0.0018  lr: 0.001998  max_mem: 1778M
[32m[11/13 00:37:05 d2.utils.events]: [0m eta: 0:26:06  iter: 219  total_loss: 1.789  loss_cls: 0.248  loss_box_reg: 0.4192  loss_mask: 0.3609  loss_rpn_cls: 0.2486  loss_rpn_loc: 0.4531  time: 0.1624  data_time: 0.0017  lr: 0.0021978  max_mem: 1778M
[32m[11/13 00:37:09 d2.utils.events]: [0m eta: 0:26:08  iter: 239  total_loss: 1.702  loss_cls: 0.2205  loss_box_reg: 0.4267  loss_mask: 0.3407  loss_rpn_cls: 0.2729  loss_rpn_loc: 0.4287  time: 0.1630  data_time: 0.0018  lr: 0.0023976  max_mem: 1778M
[32m[11/13 00:37:12 d2.utils.events]: [0m eta: 0:26:06  iter: 259  total_loss: 1.638  loss_cls: 0.2043  loss_box_reg: 0.4279  loss_mask: 0.3261  loss_rpn_cls: 0.2248  loss_rpn_loc: 0.4142  time: 0.1636  data_time: 0.0020  lr: 0.0025974  max_mem: 1778M
[32m[11/13 00:37:16 d2.utils.events]: [0m eta: 0:26:13  iter: 279  total_loss: 1.687  loss_cls: 0.2336  loss_box_reg: 0.4434  loss_mask: 0.3226  loss_rpn_cls: 0.2043  loss_rpn_loc: 0.4157  time: 0.1644  data_time: 0.0018  lr: 0.0027972  max_mem: 1827M
[32m[11/13 00:37:19 d2.utils.events]: [0m eta: 0:26:19  iter: 299  total_loss: 1.625  loss_cls: 0.2148  loss_box_reg: 0.4779  loss_mask: 0.3118  loss_rpn_cls: 0.2168  loss_rpn_loc: 0.4257  time: 0.1651  data_time: 0.0019  lr: 0.002997  max_mem: 1827M
[32m[11/13 00:37:23 d2.utils.events]: [0m eta: 0:26:18  iter: 319  total_loss: 1.686  loss_cls: 0.2254  loss_box_reg: 0.4218  loss_mask: 0.3214  loss_rpn_cls: 0.2092  loss_rpn_loc: 0.4373  time: 0.1652  data_time: 0.0018  lr: 0.0031968  max_mem: 1827M
[32m[11/13 00:37:26 d2.utils.events]: [0m eta: 0:26:24  iter: 339  total_loss: 1.666  loss_cls: 0.2387  loss_box_reg: 0.4647  loss_mask: 0.3353  loss_rpn_cls: 0.2372  loss_rpn_loc: 0.4174  time: 0.1657  data_time: 0.0019  lr: 0.0033966  max_mem: 1827M
[32m[11/13 00:37:30 d2.utils.events]: [0m eta: 0:26:27  iter: 359  total_loss: 1.565  loss_cls: 0.2096  loss_box_reg: 0.4356  loss_mask: 0.2914  loss_rpn_cls: 0.2241  loss_rpn_loc: 0.3886  time: 0.1661  data_time: 0.0019  lr: 0.0035964  max_mem: 1827M
[32m[11/13 00:37:33 d2.utils.events]: [0m eta: 0:26:26  iter: 379  total_loss: 1.646  loss_cls: 0.2247  loss_box_reg: 0.4978  loss_mask: 0.2998  loss_rpn_cls: 0.1959  loss_rpn_loc: 0.4082  time: 0.1663  data_time: 0.0019  lr: 0.0037962  max_mem: 1827M
[32m[11/13 00:37:36 d2.utils.events]: [0m eta: 0:26:30  iter: 399  total_loss: 1.693  loss_cls: 0.2368  loss_box_reg: 0.508  loss_mask: 0.2881  loss_rpn_cls: 0.2046  loss_rpn_loc: 0.4273  time: 0.1666  data_time: 0.0020  lr: 0.003996  max_mem: 1827M
[32m[11/13 00:37:40 d2.utils.events]: [0m eta: 0:26:34  iter: 419  total_loss: 1.599  loss_cls: 0.2514  loss_box_reg: 0.498  loss_mask: 0.2789  loss_rpn_cls: 0.1889  loss_rpn_loc: 0.4208  time: 0.1669  data_time: 0.0019  lr: 0.0041958  max_mem: 1827M
[32m[11/13 00:37:43 d2.utils.events]: [0m eta: 0:26:38  iter: 439  total_loss: 1.554  loss_cls: 0.2251  loss_box_reg: 0.4709  loss_mask: 0.2687  loss_rpn_cls: 0.2012  loss_rpn_loc: 0.3904  time: 0.1671  data_time: 0.0017  lr: 0.0043956  max_mem: 1827M
[32m[11/13 00:37:47 d2.utils.events]: [0m eta: 0:26:34  iter: 459  total_loss: 1.5  loss_cls: 0.217  loss_box_reg: 0.4464  loss_mask: 0.2688  loss_rpn_cls: 0.2156  loss_rpn_loc: 0.403  time: 0.1672  data_time: 0.0018  lr: 0.0045954  max_mem: 1827M
[32m[11/13 00:37:50 d2.utils.events]: [0m eta: 0:26:34  iter: 479  total_loss: 1.598  loss_cls: 0.2476  loss_box_reg: 0.4586  loss_mask: 0.2713  loss_rpn_cls: 0.218  loss_rpn_loc: 0.3937  time: 0.1673  data_time: 0.0018  lr: 0.0047952  max_mem: 1827M
[32m[11/13 00:37:54 d2.utils.events]: [0m eta: 0:26:48  iter: 499  total_loss: 1.592  loss_cls: 0.2386  loss_box_reg: 0.4964  loss_mask: 0.2542  loss_rpn_cls: 0.1799  loss_rpn_loc: 0.399  time: 0.1675  data_time: 0.0019  lr: 0.004995  max_mem: 1827M
[32m[11/13 00:37:57 d2.utils.events]: [0m eta: 0:26:45  iter: 519  total_loss: 1.554  loss_cls: 0.2203  loss_box_reg: 0.4555  loss_mask: 0.2623  loss_rpn_cls: 0.1698  loss_rpn_loc: 0.398  time: 0.1675  data_time: 0.0019  lr: 0.0051948  max_mem: 1827M
[32m[11/13 00:38:00 d2.utils.events]: [0m eta: 0:26:45  iter: 539  total_loss: 1.659  loss_cls: 0.2403  loss_box_reg: 0.4989  loss_mask: 0.2733  loss_rpn_cls: 0.1978  loss_rpn_loc: 0.4379  time: 0.1677  data_time: 0.0018  lr: 0.0053946  max_mem: 1827M
[32m[11/13 00:38:04 d2.utils.events]: [0m eta: 0:26:47  iter: 559  total_loss: 1.646  loss_cls: 0.24  loss_box_reg: 0.5118  loss_mask: 0.2543  loss_rpn_cls: 0.2015  loss_rpn_loc: 0.4145  time: 0.1679  data_time: 0.0018  lr: 0.0055944  max_mem: 1827M
[32m[11/13 00:38:07 d2.utils.events]: [0m eta: 0:26:48  iter: 579  total_loss: 1.538  loss_cls: 0.2282  loss_box_reg: 0.5032  loss_mask: 0.2545  loss_rpn_cls: 0.1519  loss_rpn_loc: 0.3925  time: 0.1681  data_time: 0.0020  lr: 0.0057942  max_mem: 1827M
[32m[11/13 00:38:11 d2.utils.events]: [0m eta: 0:26:47  iter: 599  total_loss: 1.478  loss_cls: 0.2349  loss_box_reg: 0.4627  loss_mask: 0.2487  loss_rpn_cls: 0.2041  loss_rpn_loc: 0.376  time: 0.1684  data_time: 0.0021  lr: 0.005994  max_mem: 1827M
[32m[11/13 00:38:14 d2.utils.events]: [0m eta: 0:26:44  iter: 619  total_loss: 1.462  loss_cls: 0.2297  loss_box_reg: 0.4579  loss_mask: 0.25  loss_rpn_cls: 0.167  loss_rpn_loc: 0.3676  time: 0.1684  data_time: 0.0018  lr: 0.0061938  max_mem: 1827M
[32m[11/13 00:38:18 d2.utils.events]: [0m eta: 0:26:43  iter: 639  total_loss: 1.464  loss_cls: 0.2208  loss_box_reg: 0.4488  loss_mask: 0.253  loss_rpn_cls: 0.1482  loss_rpn_loc: 0.3555  time: 0.1686  data_time: 0.0020  lr: 0.0063936  max_mem: 1827M
[32m[11/13 00:38:21 d2.utils.events]: [0m eta: 0:26:40  iter: 659  total_loss: 1.494  loss_cls: 0.2043  loss_box_reg: 0.4226  loss_mask: 0.2348  loss_rpn_cls: 0.2207  loss_rpn_loc: 0.3999  time: 0.1687  data_time: 0.0019  lr: 0.0065934  max_mem: 1827M
[32m[11/13 00:38:25 d2.utils.events]: [0m eta: 0:26:37  iter: 679  total_loss: 1.46  loss_cls: 0.2196  loss_box_reg: 0.4492  loss_mask: 0.2323  loss_rpn_cls: 0.1719  loss_rpn_loc: 0.3946  time: 0.1688  data_time: 0.0019  lr: 0.0067932  max_mem: 1827M
[32m[11/13 00:38:28 d2.utils.events]: [0m eta: 0:26:34  iter: 699  total_loss: 1.323  loss_cls: 0.1846  loss_box_reg: 0.3903  loss_mask: 0.2352  loss_rpn_cls: 0.1493  loss_rpn_loc: 0.3913  time: 0.1688  data_time: 0.0019  lr: 0.006993  max_mem: 1827M
